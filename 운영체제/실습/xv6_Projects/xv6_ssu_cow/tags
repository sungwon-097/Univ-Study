!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	25;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	user/sh.c	12;"	d	file:
BACKSPACE	console.c	127;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	28;"	d	file:
BIG	user/usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	29;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	189;"	d	file:
C	kbd.h	32;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O1 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	123;"	d	file:
CMOS_RETURN	lapic.c	124;"	d	file:
CMOS_STATA	lapic.c	163;"	d	file:
CMOS_STATB	lapic.c	164;"	d	file:
CMOS_UIP	lapic.c	165;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	37;"	d
CONV	lapic.c	217;"	d	file:
CONV	lapic.c	224;"	d	file:
COW	defs.h	1;"	d
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_PE	mmu.h	8;"	d
CR0_PG	mmu.h	10;"	d
CR0_WP	mmu.h	9;"	d
CR4_PSE	mmu.h	12;"	d
CRTPORT	console.c	128;"	d	file:
CTL	kbd.h	10;"	d
DAY	lapic.c	170;"	d	file:
DEASSERT	lapic.c	26;"	d	file:
DELIVS	lapic.c	24;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	51;"	d
DPL_USER	mmu.h	53;"	d
Disassembly	user/cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/cowtest1.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/cowtest2.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/cowtest3.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	user/zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	19;"	d	file:
EOI	lapic.c	17;"	d	file:
ERROR	lapic.c	38;"	d	file:
ESR	lapic.c	20;"	d	file:
EXEC	user/sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	30;"	d	file:
FL_IF	mmu.h	5;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	169;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	31;"	d	file:
ICRLO	lapic.c	21;"	d	file:
ID	lapic.c	14;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	22;"	d	file:
INPUT_BUF	console.c	181;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	6;"	d	file:
IO_PIC2	picirq.c	7;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	27;"	d	file:
LINT0	lapic.c	36;"	d	file:
LINT1	lapic.c	37;"	d	file:
LIST	user/sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	39;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	user/sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	168;"	d	file:
MONTH	lapic.c	171;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	user/forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	202;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	83;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	84;"	d
NSEGS	mmu.h	22;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	12;"	d
P2V_WO	memlayout.h	15;"	d
PCINT	lapic.c	35;"	d	file:
PDX	mmu.h	74;"	d
PDXSHIFT	mmu.h	89;"	d
PERIODIC	lapic.c	34;"	d	file:
PGADDR	mmu.h	80;"	d
PGROUNDDOWN	mmu.h	92;"	d
PGROUNDUP	mmu.h	91;"	d
PGSHIFT	mmu.h	87;"	d
PGSIZE	mmu.h	85;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	user/sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	101;"	d
PTE_FLAGS	mmu.h	102;"	d
PTE_P	mmu.h	95;"	d
PTE_PS	mmu.h	98;"	d
PTE_U	mmu.h	97;"	d
PTE_W	mmu.h	96;"	d
PTX	mmu.h	77;"	d
PTXSHIFT	mmu.h	88;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	user/sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	user/usertests.c	1701;"	d	file:
RTC_DATA	user/usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	167;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	43;"	d
SEG16	mmu.h	47;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	15;"	d
SEG_KDATA	mmu.h	16;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	19;"	d
SEG_UCODE	mmu.h	17;"	d
SEG_UDATA	mmu.h	18;"	d
SETGATE	mmu.h	169;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	23;"	d	file:
STA_R	asm.h	18;"	d
STA_R	mmu.h	58;"	d
STA_W	asm.h	17;"	d
STA_W	mmu.h	57;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	56;"	d
STS_IG32	mmu.h	62;"	d
STS_T32A	mmu.h	61;"	d
STS_TG32	mmu.h	63;"	d
SVR	lapic.c	18;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_freemem	syscall.h	23;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	41;"	d	file:
TDCR	lapic.c	42;"	d	file:
TICR	lapic.c	40;"	d	file:
TIMER	lapic.c	32;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	16;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
U	Makefile	/^U=user$/;"	m
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	11;"	d
V2P_WO	memlayout.h	14;"	d
VER	lapic.c	15;"	d	file:
X1	lapic.c	33;"	d	file:
YEAR	lapic.c	172;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
a	user/cowtest1.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/cowtest2.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/cowtest3.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/forktest.asm	/^   a:	53                   	push   %ebx$/;"	l
a	user/init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/stressfs.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	user/cowtest1.asm	/^  a0:	74 15                	je     b7 <strcmp+0x25>$/;"	l
a0	user/init.asm	/^  a0:	6a 01                	push   $0x1$/;"	l
a0	user/kill.asm	/^  a0:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a00	user/sh.asm	/^ a00:	74 15                	je     a17 <strcmp+0x25>$/;"	l
a02	user/sh.asm	/^ a02:	3a 02                	cmp    (%edx),%al$/;"	l
a03	user/usertests.asm	/^     a03:	e8 92 2d 00 00       	call   379a <wait>$/;"	l
a04	user/sh.asm	/^ a04:	75 11                	jne    a17 <strcmp+0x25>$/;"	l
a06	user/sh.asm	/^ a06:	83 c1 01             	add    $0x1,%ecx$/;"	l
a08	user/usertests.asm	/^     a08:	83 c4 08             	add    $0x8,%esp$/;"	l
a09	user/sh.asm	/^ a09:	83 c2 01             	add    $0x1,%edx$/;"	l
a0b	user/usertests.asm	/^     a0b:	68 57 3f 00 00       	push   $0x3f57$/;"	l
a0c	user/sh.asm	/^ a0c:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
a0f	user/sh.asm	/^ a0f:	84 c0                	test   %al,%al$/;"	l
a1	user/cat.asm	/^  a1:	e8 55 02 00 00       	call   2fb <open>$/;"	l
a1	user/cowtest2.asm	/^  a1:	75 11                	jne    b4 <strcmp+0x25>$/;"	l
a1	user/echo.asm	/^  a1:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
a1	user/ln.asm	/^  a1:	0f b6 c0             	movzbl %al,%eax$/;"	l
a1	user/ls.asm	/^  a1:	6a 00                	push   $0x0$/;"	l
a1	user/wc.asm	/^  a1:	ff 75 dc             	pushl  -0x24(%ebp)$/;"	l
a1	user/zombie.asm	/^  a1:	55                   	push   %ebp$/;"	l
a10	user/usertests.asm	/^     a10:	6a 01                	push   $0x1$/;"	l
a11	user/sh.asm	/^ a11:	74 04                	je     a17 <strcmp+0x25>$/;"	l
a12	user/usertests.asm	/^     a12:	e8 ad 2e 00 00       	call   38c4 <printf>$/;"	l
a13	user/sh.asm	/^ a13:	3a 02                	cmp    (%edx),%al$/;"	l
a15	user/sh.asm	/^ a15:	74 ef                	je     a06 <strcmp+0x14>$/;"	l
a17	user/sh.asm	/^ a17:	0f b6 c0             	movzbl %al,%eax$/;"	l
a17	user/usertests.asm	/^     a17:	83 c4 10             	add    $0x10,%esp$/;"	l
a1a	user/sh.asm	/^ a1a:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a1a	user/usertests.asm	/^     a1a:	eb b1                	jmp    9cd <pipe1+0x128>$/;"	l
a1c	user/usertests.asm	/^     a1c:	83 ec 04             	sub    $0x4,%esp$/;"	l
a1d	user/sh.asm	/^ a1d:	29 d0                	sub    %edx,%eax$/;"	l
a1f	user/sh.asm	/^ a1f:	5d                   	pop    %ebp$/;"	l
a1f	user/usertests.asm	/^     a1f:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
a2	user/cowtest1.asm	/^  a2:	3a 02                	cmp    (%edx),%al$/;"	l
a2	user/cowtest3.asm	/^  a2:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a2	user/forktest.asm	/^  a2:	6a 01                	push   $0x1$/;"	l
a2	user/grep.asm	/^  a2:	eb e3                	jmp    87 <matchhere+0x3f>$/;"	l
a2	user/init.asm	/^  a2:	e8 2a 03 00 00       	call   3d1 <printf>$/;"	l
a2	user/mkdir.asm	/^  a2:	84 c0                	test   %al,%al$/;"	l
a2	user/rm.asm	/^  a2:	84 c0                	test   %al,%al$/;"	l
a2	user/sh.asm	/^  a2:	68 e4 0f 00 00       	push   $0xfe4$/;"	l
a2	user/stressfs.asm	/^  a2:	57                   	push   %edi$/;"	l
a2	user/zombie.asm	/^  a2:	89 e5                	mov    %esp,%ebp$/;"	l
a20	user/sh.asm	/^ a20:	c3                   	ret    $/;"	l
a21	user/sh.asm	/^ a21:	55                   	push   %ebp$/;"	l
a22	user/sh.asm	/^ a22:	89 e5                	mov    %esp,%ebp$/;"	l
a22	user/usertests.asm	/^     a22:	68 40 3f 00 00       	push   $0x3f40$/;"	l
a24	user/sh.asm	/^ a24:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a27	user/sh.asm	/^ a27:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
a27	user/usertests.asm	/^     a27:	6a 01                	push   $0x1$/;"	l
a29	user/usertests.asm	/^     a29:	e8 96 2e 00 00       	call   38c4 <printf>$/;"	l
a2a	user/sh.asm	/^ a2a:	74 12                	je     a3e <strlen+0x1d>$/;"	l
a2c	user/sh.asm	/^ a2c:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
a2e	user/usertests.asm	/^     a2e:	e8 5f 2d 00 00       	call   3792 <exit>$/;"	l
a3	user/cowtest2.asm	/^  a3:	83 c1 01             	add    $0x1,%ecx$/;"	l
a3	user/kill.asm	/^  a3:	29 d0                	sub    %edx,%eax$/;"	l
a3	user/ls.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	user/stressfs.asm	/^  a3:	56                   	push   %esi$/;"	l
a3	user/usertests.asm	/^      a3:	e8 1c 38 00 00       	call   38c4 <printf>$/;"	l
a31	user/sh.asm	/^ a31:	83 c2 01             	add    $0x1,%edx$/;"	l
a33	user/usertests.asm	/^     a33:	83 ec 08             	sub    $0x8,%esp$/;"	l
a34	user/sh.asm	/^ a34:	89 d0                	mov    %edx,%eax$/;"	l
a36	user/sh.asm	/^ a36:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
a36	user/usertests.asm	/^     a36:	68 61 3f 00 00       	push   $0x3f61$/;"	l
a3a	user/sh.asm	/^ a3a:	75 f5                	jne    a31 <strlen+0x10>$/;"	l
a3b	user/usertests.asm	/^     a3b:	6a 01                	push   $0x1$/;"	l
a3c	user/sh.asm	/^ a3c:	5d                   	pop    %ebp$/;"	l
a3d	user/sh.asm	/^ a3d:	c3                   	ret    $/;"	l
a3d	user/usertests.asm	/^     a3d:	e8 82 2e 00 00       	call   38c4 <printf>$/;"	l
a3e	user/sh.asm	/^ a3e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a4	user/cowtest1.asm	/^  a4:	75 11                	jne    b7 <strcmp+0x25>$/;"	l
a4	user/echo.asm	/^  a4:	84 c0                	test   %al,%al$/;"	l
a4	user/forktest.asm	/^  a4:	e8 57 ff ff ff       	call   0 <print>$/;"	l
a4	user/grep.asm	/^  a4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a4	user/ln.asm	/^  a4:	0f b6 12             	movzbl (%edx),%edx$/;"	l
a4	user/ls.asm	/^  a4:	e8 31 04 00 00       	call   4da <open>$/;"	l
a4	user/mkdir.asm	/^  a4:	74 15                	je     bb <strcmp+0x25>$/;"	l
a4	user/rm.asm	/^  a4:	74 15                	je     bb <strcmp+0x25>$/;"	l
a4	user/stressfs.asm	/^  a4:	e8 48 02 00 00       	call   2f1 <write>$/;"	l
a4	user/wc.asm	/^  a4:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
a4	user/zombie.asm	/^  a4:	57                   	push   %edi$/;"	l
a42	user/usertests.asm	/^     a42:	e8 4b 2d 00 00       	call   3792 <exit>$/;"	l
a43	user/sh.asm	/^ a43:	eb f7                	jmp    a3c <strlen+0x1b>$/;"	l
a45	user/sh.asm	/^ a45:	55                   	push   %ebp$/;"	l
a46	user/sh.asm	/^ a46:	89 e5                	mov    %esp,%ebp$/;"	l
a47	user/usertests.asm	/^     a47:	55                   	push   %ebp$/;"	l
a48	user/sh.asm	/^ a48:	57                   	push   %edi$/;"	l
a48	user/usertests.asm	/^     a48:	89 e5                	mov    %esp,%ebp$/;"	l
a49	user/sh.asm	/^ a49:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a4a	user/usertests.asm	/^     a4a:	57                   	push   %edi$/;"	l
a4b	user/usertests.asm	/^     a4b:	56                   	push   %esi$/;"	l
a4c	user/sh.asm	/^ a4c:	89 d7                	mov    %edx,%edi$/;"	l
a4c	user/usertests.asm	/^     a4c:	53                   	push   %ebx$/;"	l
a4d	user/usertests.asm	/^     a4d:	83 ec 24             	sub    $0x24,%esp$/;"	l
a4e	user/sh.asm	/^ a4e:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
a5	user/cowtest3.asm	/^  a5:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
a5	user/kill.asm	/^  a5:	5d                   	pop    %ebp$/;"	l
a5	user/zombie.asm	/^  a5:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a50	user/usertests.asm	/^     a50:	68 70 3f 00 00       	push   $0x3f70$/;"	l
a51	user/sh.asm	/^ a51:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a54	user/sh.asm	/^ a54:	fc                   	cld    $/;"	l
a55	user/sh.asm	/^ a55:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a55	user/usertests.asm	/^     a55:	6a 01                	push   $0x1$/;"	l
a57	user/sh.asm	/^ a57:	89 d0                	mov    %edx,%eax$/;"	l
a57	user/usertests.asm	/^     a57:	e8 68 2e 00 00       	call   38c4 <printf>$/;"	l
a59	user/sh.asm	/^ a59:	5f                   	pop    %edi$/;"	l
a5a	user/sh.asm	/^ a5a:	5d                   	pop    %ebp$/;"	l
a5b	user/sh.asm	/^ a5b:	c3                   	ret    $/;"	l
a5c	user/sh.asm	/^ a5c:	55                   	push   %ebp$/;"	l
a5c	user/usertests.asm	/^     a5c:	e8 29 2d 00 00       	call   378a <fork>$/;"	l
a5d	user/sh.asm	/^ a5d:	89 e5                	mov    %esp,%ebp$/;"	l
a5f	user/sh.asm	/^ a5f:	53                   	push   %ebx$/;"	l
a6	user/cat.asm	/^  a6:	89 c6                	mov    %eax,%esi$/;"	l
a6	user/cowtest1.asm	/^  a6:	83 c1 01             	add    $0x1,%ecx$/;"	l
a6	user/cowtest2.asm	/^  a6:	83 c2 01             	add    $0x1,%edx$/;"	l
a6	user/echo.asm	/^  a6:	74 04                	je     ac <strcmp+0x25>$/;"	l
a6	user/kill.asm	/^  a6:	c3                   	ret    $/;"	l
a6	user/mkdir.asm	/^  a6:	3a 02                	cmp    (%edx),%al$/;"	l
a6	user/rm.asm	/^  a6:	3a 02                	cmp    (%edx),%al$/;"	l
a60	user/sh.asm	/^ a60:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a61	user/usertests.asm	/^     a61:	83 c4 10             	add    $0x10,%esp$/;"	l
a63	user/sh.asm	/^ a63:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
a64	user/usertests.asm	/^     a64:	85 c0                	test   %eax,%eax$/;"	l
a66	user/sh.asm	/^ a66:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a66	user/usertests.asm	/^     a66:	75 02                	jne    a6a <preempt+0x23>$/;"	l
a68	user/usertests.asm	/^     a68:	eb fe                	jmp    a68 <preempt+0x21>$/;"	l
a69	user/sh.asm	/^ a69:	84 d2                	test   %dl,%dl$/;"	l
a6a	user/usertests.asm	/^     a6a:	89 c7                	mov    %eax,%edi$/;"	l
a6b	user/sh.asm	/^ a6b:	74 1e                	je     a8b <strchr+0x2f>$/;"	l
a6c	user/usertests.asm	/^     a6c:	e8 19 2d 00 00       	call   378a <fork>$/;"	l
a6d	user/sh.asm	/^ a6d:	89 d9                	mov    %ebx,%ecx$/;"	l
a6f	user/sh.asm	/^ a6f:	38 d3                	cmp    %dl,%bl$/;"	l
a7	user/grep.asm	/^  a7:	80 38 00             	cmpb   $0x0,(%eax)$/;"	l
a7	user/init.asm	/^  a7:	e8 eb 01 00 00       	call   297 <fork>$/;"	l
a7	user/kill.asm	/^  a7:	55                   	push   %ebp$/;"	l
a7	user/ln.asm	/^  a7:	29 d0                	sub    %edx,%eax$/;"	l
a7	user/sh.asm	/^  a7:	e8 99 ff ff ff       	call   45 <panic>$/;"	l
a7	user/wc.asm	/^  a7:	56                   	push   %esi$/;"	l
a71	user/sh.asm	/^ a71:	74 15                	je     a88 <strchr+0x2c>$/;"	l
a71	user/usertests.asm	/^     a71:	89 c6                	mov    %eax,%esi$/;"	l
a73	user/sh.asm	/^ a73:	83 c0 01             	add    $0x1,%eax$/;"	l
a73	user/usertests.asm	/^     a73:	85 c0                	test   %eax,%eax$/;"	l
a75	user/usertests.asm	/^     a75:	75 02                	jne    a79 <preempt+0x32>$/;"	l
a76	user/sh.asm	/^ a76:	0f b6 10             	movzbl (%eax),%edx$/;"	l
a77	user/usertests.asm	/^     a77:	eb fe                	jmp    a77 <preempt+0x30>$/;"	l
a79	user/sh.asm	/^ a79:	84 d2                	test   %dl,%dl$/;"	l
a79	user/usertests.asm	/^     a79:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a7b	user/sh.asm	/^ a7b:	74 06                	je     a83 <strchr+0x27>$/;"	l
a7c	user/usertests.asm	/^     a7c:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a7d	user/sh.asm	/^ a7d:	38 ca                	cmp    %cl,%dl$/;"	l
a7f	user/sh.asm	/^ a7f:	75 f2                	jne    a73 <strchr+0x17>$/;"	l
a7f	user/usertests.asm	/^     a7f:	50                   	push   %eax$/;"	l
a8	user/cat.asm	/^  a8:	83 c4 10             	add    $0x10,%esp$/;"	l
a8	user/cowtest3.asm	/^  a8:	84 c0                	test   %al,%al$/;"	l
a8	user/echo.asm	/^  a8:	3a 02                	cmp    (%edx),%al$/;"	l
a8	user/kill.asm	/^  a8:	89 e5                	mov    %esp,%ebp$/;"	l
a8	user/mkdir.asm	/^  a8:	75 11                	jne    bb <strcmp+0x25>$/;"	l
a8	user/rm.asm	/^  a8:	75 11                	jne    bb <strcmp+0x25>$/;"	l
a8	user/usertests.asm	/^      a8:	e8 e5 36 00 00       	call   3792 <exit>$/;"	l
a8	user/wc.asm	/^  a8:	68 86 07 00 00       	push   $0x786$/;"	l
a8	user/zombie.asm	/^  a8:	89 d7                	mov    %edx,%edi$/;"	l
a80	user/usertests.asm	/^     a80:	e8 1d 2d 00 00       	call   37a2 <pipe>$/;"	l
a81	user/sh.asm	/^ a81:	eb 05                	jmp    a88 <strchr+0x2c>$/;"	l
a83	user/sh.asm	/^ a83:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a85	user/usertests.asm	/^     a85:	e8 00 2d 00 00       	call   378a <fork>$/;"	l
a88	user/sh.asm	/^ a88:	5b                   	pop    %ebx$/;"	l
a89	user/sh.asm	/^ a89:	5d                   	pop    %ebp$/;"	l
a8a	user/sh.asm	/^ a8a:	c3                   	ret    $/;"	l
a8a	user/usertests.asm	/^     a8a:	89 c3                	mov    %eax,%ebx$/;"	l
a8b	user/sh.asm	/^ a8b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8c	user/usertests.asm	/^     a8c:	83 c4 10             	add    $0x10,%esp$/;"	l
a8f	user/usertests.asm	/^     a8f:	85 c0                	test   %eax,%eax$/;"	l
a9	user/cowtest1.asm	/^  a9:	83 c2 01             	add    $0x1,%edx$/;"	l
a9	user/cowtest2.asm	/^  a9:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
a9	user/forktest.asm	/^  a9:	83 c4 10             	add    $0x10,%esp$/;"	l
a9	user/ln.asm	/^  a9:	5d                   	pop    %ebp$/;"	l
a9	user/ls.asm	/^  a9:	83 c4 10             	add    $0x10,%esp$/;"	l
a9	user/stressfs.asm	/^  a9:	83 c4 10             	add    $0x10,%esp$/;"	l
a90	user/sh.asm	/^ a90:	eb f6                	jmp    a88 <strchr+0x2c>$/;"	l
a91	user/usertests.asm	/^     a91:	75 47                	jne    ada <preempt+0x93>$/;"	l
a92	user/sh.asm	/^ a92:	55                   	push   %ebp$/;"	l
a93	user/sh.asm	/^ a93:	89 e5                	mov    %esp,%ebp$/;"	l
a93	user/usertests.asm	/^     a93:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a95	user/sh.asm	/^ a95:	57                   	push   %edi$/;"	l
a96	user/sh.asm	/^ a96:	56                   	push   %esi$/;"	l
a96	user/usertests.asm	/^     a96:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
a97	user/sh.asm	/^ a97:	53                   	push   %ebx$/;"	l
a98	user/sh.asm	/^ a98:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
a99	user/usertests.asm	/^     a99:	e8 1c 2d 00 00       	call   37ba <close>$/;"	l
a9b	user/sh.asm	/^ a9b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
a9e	user/usertests.asm	/^     a9e:	83 c4 0c             	add    $0xc,%esp$/;"	l
aa	user/cowtest3.asm	/^  aa:	74 15                	je     c1 <strcmp+0x25>$/;"	l
aa	user/echo.asm	/^  aa:	74 ef                	je     9b <strcmp+0x14>$/;"	l
aa	user/grep.asm	/^  aa:	0f 94 c0             	sete   %al$/;"	l
aa	user/kill.asm	/^  aa:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
aa	user/ln.asm	/^  aa:	c3                   	ret    $/;"	l
aa	user/mkdir.asm	/^  aa:	83 c1 01             	add    $0x1,%ecx$/;"	l
aa	user/rm.asm	/^  aa:	83 c1 01             	add    $0x1,%ecx$/;"	l
aa	user/zombie.asm	/^  aa:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
aa0	user/sh.asm	/^ aa0:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
aa1	user/usertests.asm	/^     aa1:	6a 01                	push   $0x1$/;"	l
aa3	user/sh.asm	/^ aa3:	8d 5e 01             	lea    0x1(%esi),%ebx$/;"	l
aa3	user/usertests.asm	/^     aa3:	68 35 45 00 00       	push   $0x4535$/;"	l
aa6	user/sh.asm	/^ aa6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
aa8	user/usertests.asm	/^     aa8:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
aa9	user/sh.asm	/^ aa9:	7d 2b                	jge    ad6 <gets+0x44>$/;"	l
aab	user/sh.asm	/^ aab:	83 ec 04             	sub    $0x4,%esp$/;"	l
aab	user/usertests.asm	/^     aab:	e8 02 2d 00 00       	call   37b2 <write>$/;"	l
aae	user/sh.asm	/^ aae:	6a 01                	push   $0x1$/;"	l
ab	user/cat.asm	/^  ab:	85 c0                	test   %eax,%eax$/;"	l
ab	user/ln.asm	/^  ab:	55                   	push   %ebp$/;"	l
ab0	user/sh.asm	/^ ab0:	57                   	push   %edi$/;"	l
ab0	user/usertests.asm	/^     ab0:	83 c4 10             	add    $0x10,%esp$/;"	l
ab1	user/sh.asm	/^ ab1:	6a 00                	push   $0x0$/;"	l
ab3	user/sh.asm	/^ ab3:	e8 f2 00 00 00       	call   baa <read>$/;"	l
ab3	user/usertests.asm	/^     ab3:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ab6	user/usertests.asm	/^     ab6:	74 12                	je     aca <preempt+0x83>$/;"	l
ab8	user/sh.asm	/^ ab8:	83 c4 10             	add    $0x10,%esp$/;"	l
ab8	user/usertests.asm	/^     ab8:	83 ec 08             	sub    $0x8,%esp$/;"	l
abb	user/sh.asm	/^ abb:	85 c0                	test   %eax,%eax$/;"	l
abb	user/usertests.asm	/^     abb:	68 7a 3f 00 00       	push   $0x3f7a$/;"	l
abd	user/sh.asm	/^ abd:	7e 17                	jle    ad6 <gets+0x44>$/;"	l
abf	user/sh.asm	/^ abf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax$/;"	l
ac	user/cowtest1.asm	/^  ac:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
ac	user/cowtest2.asm	/^  ac:	84 c0                	test   %al,%al$/;"	l
ac	user/cowtest3.asm	/^  ac:	3a 02                	cmp    (%edx),%al$/;"	l
ac	user/echo.asm	/^  ac:	0f b6 c0             	movzbl %al,%eax$/;"	l
ac	user/forktest.asm	/^  ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
ac	user/init.asm	/^  ac:	89 c3                	mov    %eax,%ebx$/;"	l
ac	user/ln.asm	/^  ac:	89 e5                	mov    %esp,%ebp$/;"	l
ac	user/ls.asm	/^  ac:	85 c0                	test   %eax,%eax$/;"	l
ac	user/sh.asm	/^  ac:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
ac	user/stressfs.asm	/^  ac:	83 eb 01             	sub    $0x1,%ebx$/;"	l
ac0	user/usertests.asm	/^     ac0:	6a 01                	push   $0x1$/;"	l
ac2	user/usertests.asm	/^     ac2:	e8 fd 2d 00 00       	call   38c4 <printf>$/;"	l
ac3	user/sh.asm	/^ ac3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ac6	user/sh.asm	/^ ac6:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)$/;"	l
ac7	user/usertests.asm	/^     ac7:	83 c4 10             	add    $0x10,%esp$/;"	l
aca	user/sh.asm	/^ aca:	89 de                	mov    %ebx,%esi$/;"	l
aca	user/usertests.asm	/^     aca:	83 ec 0c             	sub    $0xc,%esp$/;"	l
acc	user/sh.asm	/^ acc:	3c 0a                	cmp    $0xa,%al$/;"	l
acd	user/usertests.asm	/^     acd:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
ace	user/sh.asm	/^ ace:	74 04                	je     ad4 <gets+0x42>$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	user/cat.asm	/^  ad:	78 33                	js     e2 <main+0x74>$/;"	l
ad	user/grep.asm	/^  ad:	0f b6 c0             	movzbl %al,%eax$/;"	l
ad	user/kill.asm	/^  ad:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
ad	user/mkdir.asm	/^  ad:	83 c2 01             	add    $0x1,%edx$/;"	l
ad	user/rm.asm	/^  ad:	83 c2 01             	add    $0x1,%edx$/;"	l
ad	user/usertests.asm	/^      ad:	83 ec 08             	sub    $0x8,%esp$/;"	l
ad	user/wc.asm	/^  ad:	6a 01                	push   $0x1$/;"	l
ad	user/zombie.asm	/^  ad:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ad0	user/sh.asm	/^ ad0:	3c 0d                	cmp    $0xd,%al$/;"	l
ad0	user/usertests.asm	/^     ad0:	e8 e5 2c 00 00       	call   37ba <close>$/;"	l
ad2	user/sh.asm	/^ ad2:	75 cf                	jne    aa3 <gets+0x11>$/;"	l
ad4	user/sh.asm	/^ ad4:	89 de                	mov    %ebx,%esi$/;"	l
ad5	user/usertests.asm	/^     ad5:	83 c4 10             	add    $0x10,%esp$/;"	l
ad6	user/sh.asm	/^ ad6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ad8	user/usertests.asm	/^     ad8:	eb fe                	jmp    ad8 <preempt+0x91>$/;"	l
ad9	user/sh.asm	/^ ad9:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
ada	user/usertests.asm	/^     ada:	83 ec 0c             	sub    $0xc,%esp$/;"	l
add	user/sh.asm	/^ add:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
add	user/usertests.asm	/^     add:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ae	user/cowtest2.asm	/^  ae:	74 04                	je     b4 <strcmp+0x25>$/;"	l
ae	user/cowtest3.asm	/^  ae:	75 11                	jne    c1 <strcmp+0x25>$/;"	l
ae	user/init.asm	/^  ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae	user/ln.asm	/^  ae:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
ae	user/ls.asm	/^  ae:	78 7b                	js     12b <ls+0x99>$/;"	l
ae0	user/sh.asm	/^ ae0:	5b                   	pop    %ebx$/;"	l
ae0	user/usertests.asm	/^     ae0:	e8 d5 2c 00 00       	call   37ba <close>$/;"	l
ae1	user/sh.asm	/^ ae1:	5e                   	pop    %esi$/;"	l
ae2	user/sh.asm	/^ ae2:	5f                   	pop    %edi$/;"	l
ae3	user/sh.asm	/^ ae3:	5d                   	pop    %ebp$/;"	l
ae4	user/sh.asm	/^ ae4:	c3                   	ret    $/;"	l
ae5	user/sh.asm	/^ ae5:	55                   	push   %ebp$/;"	l
ae5	user/usertests.asm	/^     ae5:	83 c4 0c             	add    $0xc,%esp$/;"	l
ae6	user/sh.asm	/^ ae6:	89 e5                	mov    %esp,%ebp$/;"	l
ae8	user/sh.asm	/^ ae8:	56                   	push   %esi$/;"	l
ae8	user/usertests.asm	/^     ae8:	68 00 20 00 00       	push   $0x2000$/;"	l
ae9	user/sh.asm	/^ ae9:	53                   	push   %ebx$/;"	l
aea	user/sh.asm	/^ aea:	83 ec 08             	sub    $0x8,%esp$/;"	l
aed	user/sh.asm	/^ aed:	6a 00                	push   $0x0$/;"	l
aed	user/usertests.asm	/^     aed:	68 00 84 00 00       	push   $0x8400$/;"	l
aef	user/sh.asm	/^ aef:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
af	user/cat.asm	/^  af:	83 ec 0c             	sub    $0xc,%esp$/;"	l
af	user/cowtest1.asm	/^  af:	84 c0                	test   %al,%al$/;"	l
af	user/echo.asm	/^  af:	0f b6 12             	movzbl (%edx),%edx$/;"	l
af	user/forktest.asm	/^  af:	c9                   	leave  $/;"	l
af	user/sh.asm	/^  af:	85 c0                	test   %eax,%eax$/;"	l
af	user/stressfs.asm	/^  af:	75 e9                	jne    9a <main+0x9a>$/;"	l
af	user/wc.asm	/^  af:	e8 a5 03 00 00       	call   459 <printf>$/;"	l
af2	user/sh.asm	/^ af2:	e8 db 00 00 00       	call   bd2 <open>$/;"	l
af2	user/usertests.asm	/^     af2:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
af5	user/usertests.asm	/^     af5:	e8 b0 2c 00 00       	call   37aa <read>$/;"	l
af7	user/sh.asm	/^ af7:	83 c4 10             	add    $0x10,%esp$/;"	l
afa	user/sh.asm	/^ afa:	85 c0                	test   %eax,%eax$/;"	l
afa	user/usertests.asm	/^     afa:	83 c4 10             	add    $0x10,%esp$/;"	l
afc	user/sh.asm	/^ afc:	78 24                	js     b22 <stat+0x3d>$/;"	l
afd	user/usertests.asm	/^     afd:	83 f8 01             	cmp    $0x1,%eax$/;"	l
afe	user/sh.asm	/^ afe:	89 c3                	mov    %eax,%ebx$/;"	l
after	user/cowtest1.asm	/^		after = freemem();$/;"	d
after	user/cowtest2.asm	/^	after = freemem();$/;"	d
after	user/cowtest3.asm	/^		after = freemem();$/;"	d
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	trapasm.S	/^alltraps:$/;"	l
ap	user/cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/cowtest1.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/cowtest2.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/cowtest3.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/forktest.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argptest	user/usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	initcode.S	/^argv:$/;"	l
argv	user/init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	user/sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	user/cat.asm	/^   b:	68 00 02 00 00       	push   $0x200$/;"	l
b	user/cowtest1.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/cowtest2.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/cowtest3.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/forktest.asm	/^   b:	e8 33 01 00 00       	call   143 <strlen>$/;"	l
b	user/init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/ls.asm	/^   b:	53                   	push   %ebx$/;"	l
b	user/mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/sh.asm	/^   b:	83 ec 08             	sub    $0x8,%esp$/;"	l
b	user/stressfs.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/usertests.asm	/^       b:	ff 35 0c 5c 00 00    	pushl  0x5c0c$/;"	l
b	user/zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	user/cowtest2.asm	/^  b0:	3a 02                	cmp    (%edx),%al$/;"	l
b0	user/cowtest3.asm	/^  b0:	83 c1 01             	add    $0x1,%ecx$/;"	l
b0	user/forktest.asm	/^  b0:	c3                   	ret    $/;"	l
b0	user/grep.asm	/^  b0:	eb d5                	jmp    87 <matchhere+0x3f>$/;"	l
b0	user/kill.asm	/^  b0:	74 12                	je     c4 <strlen+0x1d>$/;"	l
b0	user/ls.asm	/^  b0:	89 c6                	mov    %eax,%esi$/;"	l
b0	user/mkdir.asm	/^  b0:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
b0	user/rm.asm	/^  b0:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
b0	user/usertests.asm	/^      b0:	68 0b 3c 00 00       	push   $0x3c0b$/;"	l
b0	user/zombie.asm	/^  b0:	fc                   	cld    $/;"	l
b00	user/sh.asm	/^ b00:	83 ec 08             	sub    $0x8,%esp$/;"	l
b00	user/usertests.asm	/^     b00:	74 1a                	je     b1c <preempt+0xd5>$/;"	l
b02	user/usertests.asm	/^     b02:	83 ec 08             	sub    $0x8,%esp$/;"	l
b03	user/sh.asm	/^ b03:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b05	user/usertests.asm	/^     b05:	68 8e 3f 00 00       	push   $0x3f8e$/;"	l
b06	user/sh.asm	/^ b06:	50                   	push   %eax$/;"	l
b07	user/sh.asm	/^ b07:	e8 de 00 00 00       	call   bea <fstat>$/;"	l
b0a	user/usertests.asm	/^     b0a:	6a 01                	push   $0x1$/;"	l
b0c	user/sh.asm	/^ b0c:	89 c6                	mov    %eax,%esi$/;"	l
b0c	user/usertests.asm	/^     b0c:	e8 b3 2d 00 00       	call   38c4 <printf>$/;"	l
b0e	user/sh.asm	/^ b0e:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b1	user/cowtest1.asm	/^  b1:	74 04                	je     b7 <strcmp+0x25>$/;"	l
b1	user/forktest.asm	/^  b1:	83 ec 08             	sub    $0x8,%esp$/;"	l
b1	user/init.asm	/^  b1:	85 c0                	test   %eax,%eax$/;"	l
b1	user/ln.asm	/^  b1:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b1	user/sh.asm	/^  b1:	74 27                	je     da <runcmd+0x5c>$/;"	l
b1	user/stressfs.asm	/^  b1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b1	user/zombie.asm	/^  b1:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
b11	user/sh.asm	/^ b11:	e8 a4 00 00 00       	call   bba <close>$/;"	l
b11	user/usertests.asm	/^     b11:	83 c4 10             	add    $0x10,%esp$/;"	l
b14	user/usertests.asm	/^     b14:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
b16	user/sh.asm	/^ b16:	83 c4 10             	add    $0x10,%esp$/;"	l
b17	user/usertests.asm	/^     b17:	5b                   	pop    %ebx$/;"	l
b18	user/usertests.asm	/^     b18:	5e                   	pop    %esi$/;"	l
b19	user/sh.asm	/^ b19:	89 f0                	mov    %esi,%eax$/;"	l
b19	user/usertests.asm	/^     b19:	5f                   	pop    %edi$/;"	l
b1a	user/usertests.asm	/^     b1a:	5d                   	pop    %ebp$/;"	l
b1b	user/sh.asm	/^ b1b:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
b1b	user/usertests.asm	/^     b1b:	c3                   	ret    $/;"	l
b1c	user/usertests.asm	/^     b1c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b1e	user/sh.asm	/^ b1e:	5b                   	pop    %ebx$/;"	l
b1f	user/sh.asm	/^ b1f:	5e                   	pop    %esi$/;"	l
b1f	user/usertests.asm	/^     b1f:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
b2	user/cat.asm	/^  b2:	50                   	push   %eax$/;"	l
b2	user/cowtest2.asm	/^  b2:	74 ef                	je     a3 <strcmp+0x14>$/;"	l
b2	user/echo.asm	/^  b2:	29 d0                	sub    %edx,%eax$/;"	l
b2	user/grep.asm	/^  b2:	83 ec 08             	sub    $0x8,%esp$/;"	l
b2	user/kill.asm	/^  b2:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b2	user/ls.asm	/^  b2:	83 ec 08             	sub    $0x8,%esp$/;"	l
b20	user/sh.asm	/^ b20:	5d                   	pop    %ebp$/;"	l
b21	user/sh.asm	/^ b21:	c3                   	ret    $/;"	l
b22	user/sh.asm	/^ b22:	be ff ff ff ff       	mov    $0xffffffff,%esi$/;"	l
b22	user/usertests.asm	/^     b22:	e8 93 2c 00 00       	call   37ba <close>$/;"	l
b27	user/sh.asm	/^ b27:	eb f0                	jmp    b19 <stat+0x34>$/;"	l
b27	user/usertests.asm	/^     b27:	83 c4 08             	add    $0x8,%esp$/;"	l
b29	user/sh.asm	/^ b29:	55                   	push   %ebp$/;"	l
b2a	user/sh.asm	/^ b2a:	89 e5                	mov    %esp,%ebp$/;"	l
b2a	user/usertests.asm	/^     b2a:	68 a1 3f 00 00       	push   $0x3fa1$/;"	l
b2c	user/sh.asm	/^ b2c:	53                   	push   %ebx$/;"	l
b2d	user/sh.asm	/^ b2d:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b2f	user/usertests.asm	/^     b2f:	6a 01                	push   $0x1$/;"	l
b3	user/cat.asm	/^  b3:	e8 48 ff ff ff       	call   0 <cat>$/;"	l
b3	user/cowtest1.asm	/^  b3:	3a 02                	cmp    (%edx),%al$/;"	l
b3	user/cowtest3.asm	/^  b3:	83 c2 01             	add    $0x1,%edx$/;"	l
b3	user/init.asm	/^  b3:	78 b0                	js     65 <main+0x65>$/;"	l
b3	user/mkdir.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	user/rm.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	user/sh.asm	/^  b3:	83 ec 08             	sub    $0x8,%esp$/;"	l
b3	user/zombie.asm	/^  b3:	89 d0                	mov    %edx,%eax$/;"	l
b30	user/sh.asm	/^ b30:	0f b6 11             	movzbl (%ecx),%edx$/;"	l
b31	user/usertests.asm	/^     b31:	e8 8e 2d 00 00       	call   38c4 <printf>$/;"	l
b33	user/sh.asm	/^ b33:	8d 42 d0             	lea    -0x30(%edx),%eax$/;"	l
b36	user/sh.asm	/^ b36:	3c 09                	cmp    $0x9,%al$/;"	l
b36	user/usertests.asm	/^     b36:	89 3c 24             	mov    %edi,(%esp)$/;"	l
b38	user/sh.asm	/^ b38:	77 20                	ja     b5a <atoi+0x31>$/;"	l
b39	user/usertests.asm	/^     b39:	e8 84 2c 00 00       	call   37c2 <kill>$/;"	l
b3a	user/sh.asm	/^ b3a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b3e	user/usertests.asm	/^     b3e:	89 34 24             	mov    %esi,(%esp)$/;"	l
b3f	user/sh.asm	/^ b3f:	83 c1 01             	add    $0x1,%ecx$/;"	l
b4	user/cowtest2.asm	/^  b4:	0f b6 c0             	movzbl %al,%eax$/;"	l
b4	user/echo.asm	/^  b4:	5d                   	pop    %ebp$/;"	l
b4	user/forktest.asm	/^  b4:	68 07 07 00 00       	push   $0x707$/;"	l
b4	user/ln.asm	/^  b4:	74 12                	je     c8 <strlen+0x1d>$/;"	l
b4	user/stressfs.asm	/^  b4:	56                   	push   %esi$/;"	l
b4	user/wc.asm	/^  b4:	83 c4 20             	add    $0x20,%esp$/;"	l
b41	user/usertests.asm	/^     b41:	e8 7c 2c 00 00       	call   37c2 <kill>$/;"	l
b42	user/sh.asm	/^ b42:	8d 04 80             	lea    (%eax,%eax,4),%eax$/;"	l
b45	user/sh.asm	/^ b45:	0f be d2             	movsbl %dl,%edx$/;"	l
b46	user/usertests.asm	/^     b46:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b48	user/sh.asm	/^ b48:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax$/;"	l
b49	user/usertests.asm	/^     b49:	e8 74 2c 00 00       	call   37c2 <kill>$/;"	l
b4c	user/sh.asm	/^ b4c:	0f b6 11             	movzbl (%ecx),%edx$/;"	l
b4e	user/usertests.asm	/^     b4e:	83 c4 08             	add    $0x8,%esp$/;"	l
b4f	user/sh.asm	/^ b4f:	8d 5a d0             	lea    -0x30(%edx),%ebx$/;"	l
b5	user/cowtest1.asm	/^  b5:	74 ef                	je     a6 <strcmp+0x14>$/;"	l
b5	user/echo.asm	/^  b5:	c3                   	ret    $/;"	l
b5	user/grep.asm	/^  b5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b5	user/init.asm	/^  b5:	85 c0                	test   %eax,%eax$/;"	l
b5	user/ls.asm	/^  b5:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax$/;"	l
b5	user/mkdir.asm	/^  b5:	74 04                	je     bb <strcmp+0x25>$/;"	l
b5	user/rm.asm	/^  b5:	74 04                	je     bb <strcmp+0x25>$/;"	l
b5	user/stressfs.asm	/^  b5:	e8 3f 02 00 00       	call   2f9 <close>$/;"	l
b5	user/usertests.asm	/^      b5:	ff 35 0c 5c 00 00    	pushl  0x5c0c$/;"	l
b5	user/zombie.asm	/^  b5:	5f                   	pop    %edi$/;"	l
b51	user/usertests.asm	/^     b51:	68 aa 3f 00 00       	push   $0x3faa$/;"	l
b52	user/sh.asm	/^ b52:	80 fb 09             	cmp    $0x9,%bl$/;"	l
b55	user/sh.asm	/^ b55:	76 e8                	jbe    b3f <atoi+0x16>$/;"	l
b56	user/usertests.asm	/^     b56:	6a 01                	push   $0x1$/;"	l
b57	user/sh.asm	/^ b57:	5b                   	pop    %ebx$/;"	l
b58	user/sh.asm	/^ b58:	5d                   	pop    %ebp$/;"	l
b58	user/usertests.asm	/^     b58:	e8 67 2d 00 00       	call   38c4 <printf>$/;"	l
b59	user/sh.asm	/^ b59:	c3                   	ret    $/;"	l
b5a	user/sh.asm	/^ b5a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b5d	user/usertests.asm	/^     b5d:	e8 38 2c 00 00       	call   379a <wait>$/;"	l
b5f	user/sh.asm	/^ b5f:	eb f6                	jmp    b57 <atoi+0x2e>$/;"	l
b6	user/cowtest3.asm	/^  b6:	0f b6 01             	movzbl (%ecx),%eax$/;"	l
b6	user/echo.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	user/ln.asm	/^  b6:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b6	user/sh.asm	/^  b6:	8d 53 04             	lea    0x4(%ebx),%edx$/;"	l
b6	user/zombie.asm	/^  b6:	5d                   	pop    %ebp$/;"	l
b61	user/sh.asm	/^ b61:	55                   	push   %ebp$/;"	l
b62	user/sh.asm	/^ b62:	89 e5                	mov    %esp,%ebp$/;"	l
b62	user/usertests.asm	/^     b62:	e8 33 2c 00 00       	call   379a <wait>$/;"	l
b64	user/sh.asm	/^ b64:	56                   	push   %esi$/;"	l
b65	user/sh.asm	/^ b65:	53                   	push   %ebx$/;"	l
b66	user/sh.asm	/^ b66:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b67	user/usertests.asm	/^     b67:	e8 2e 2c 00 00       	call   379a <wait>$/;"	l
b69	user/sh.asm	/^ b69:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
b6c	user/sh.asm	/^ b6c:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
b6c	user/usertests.asm	/^     b6c:	83 c4 08             	add    $0x8,%esp$/;"	l
b6f	user/sh.asm	/^ b6f:	85 db                	test   %ebx,%ebx$/;"	l
b6f	user/usertests.asm	/^     b6f:	68 b3 3f 00 00       	push   $0x3fb3$/;"	l
b7	user/cowtest1.asm	/^  b7:	0f b6 c0             	movzbl %al,%eax$/;"	l
b7	user/cowtest2.asm	/^  b7:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b7	user/echo.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b7	user/init.asm	/^  b7:	75 d2                	jne    8b <main+0x8b>$/;"	l
b7	user/kill.asm	/^  b7:	83 c2 01             	add    $0x1,%edx$/;"	l
b7	user/mkdir.asm	/^  b7:	3a 02                	cmp    (%edx),%al$/;"	l
b7	user/rm.asm	/^  b7:	3a 02                	cmp    (%edx),%al$/;"	l
b7	user/wc.asm	/^  b7:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
b7	user/zombie.asm	/^  b7:	c3                   	ret    $/;"	l
b71	user/sh.asm	/^ b71:	7e 13                	jle    b86 <memmove+0x25>$/;"	l
b73	user/sh.asm	/^ b73:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b74	user/usertests.asm	/^     b74:	6a 01                	push   $0x1$/;"	l
b76	user/usertests.asm	/^     b76:	e8 49 2d 00 00       	call   38c4 <printf>$/;"	l
b78	user/sh.asm	/^ b78:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx$/;"	l
b7b	user/usertests.asm	/^     b7b:	83 c4 10             	add    $0x10,%esp$/;"	l
b7c	user/sh.asm	/^ b7c:	88 0c 10             	mov    %cl,(%eax,%edx,1)$/;"	l
b7e	user/usertests.asm	/^     b7e:	eb 94                	jmp    b14 <preempt+0xcd>$/;"	l
b7f	user/sh.asm	/^ b7f:	83 c2 01             	add    $0x1,%edx$/;"	l
b8	user/cat.asm	/^  b8:	89 34 24             	mov    %esi,(%esp)$/;"	l
b8	user/grep.asm	/^  b8:	83 c0 01             	add    $0x1,%eax$/;"	l
b8	user/zombie.asm	/^  b8:	55                   	push   %ebp$/;"	l
b80	user/usertests.asm	/^     b80:	55                   	push   %ebp$/;"	l
b81	user/usertests.asm	/^     b81:	89 e5                	mov    %esp,%ebp$/;"	l
b82	user/sh.asm	/^ b82:	39 d3                	cmp    %edx,%ebx$/;"	l
b83	user/usertests.asm	/^     b83:	56                   	push   %esi$/;"	l
b84	user/sh.asm	/^ b84:	75 f2                	jne    b78 <memmove+0x17>$/;"	l
b84	user/usertests.asm	/^     b84:	53                   	push   %ebx$/;"	l
b85	user/usertests.asm	/^     b85:	be 64 00 00 00       	mov    $0x64,%esi$/;"	l
b86	user/sh.asm	/^ b86:	5b                   	pop    %ebx$/;"	l
b87	user/sh.asm	/^ b87:	5e                   	pop    %esi$/;"	l
b88	user/sh.asm	/^ b88:	5d                   	pop    %ebp$/;"	l
b89	user/sh.asm	/^ b89:	c3                   	ret    $/;"	l
b8a	user/sh.asm	/^ b8a:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
b8a	user/usertests.asm	/^     b8a:	e8 fb 2b 00 00       	call   378a <fork>$/;"	l
b8f	user/sh.asm	/^ b8f:	cd 40                	int    $0x40$/;"	l
b8f	user/usertests.asm	/^     b8f:	89 c3                	mov    %eax,%ebx$/;"	l
b9	user/cowtest3.asm	/^  b9:	84 c0                	test   %al,%al$/;"	l
b9	user/echo.asm	/^  b9:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b9	user/forktest.asm	/^  b9:	6a 01                	push   $0x1$/;"	l
b9	user/init.asm	/^  b9:	83 ec 08             	sub    $0x8,%esp$/;"	l
b9	user/mkdir.asm	/^  b9:	74 ef                	je     aa <strcmp+0x14>$/;"	l
b9	user/rm.asm	/^  b9:	74 ef                	je     aa <strcmp+0x14>$/;"	l
b9	user/sh.asm	/^  b9:	52                   	push   %edx$/;"	l
b9	user/zombie.asm	/^  b9:	89 e5                	mov    %esp,%ebp$/;"	l
b91	user/sh.asm	/^ b91:	c3                   	ret    $/;"	l
b91	user/usertests.asm	/^     b91:	85 c0                	test   %eax,%eax$/;"	l
b92	user/sh.asm	/^ b92:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
b93	user/usertests.asm	/^     b93:	78 26                	js     bbb <exitwait+0x3b>$/;"	l
b95	user/usertests.asm	/^     b95:	85 c0                	test   %eax,%eax$/;"	l
b97	user/sh.asm	/^ b97:	cd 40                	int    $0x40$/;"	l
b97	user/usertests.asm	/^     b97:	74 4f                	je     be8 <exitwait+0x68>$/;"	l
b99	user/sh.asm	/^ b99:	c3                   	ret    $/;"	l
b99	user/usertests.asm	/^     b99:	e8 fc 2b 00 00       	call   379a <wait>$/;"	l
b9a	user/sh.asm	/^ b9a:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
b9e	user/usertests.asm	/^     b9e:	39 d8                	cmp    %ebx,%eax$/;"	l
b9f	user/sh.asm	/^ b9f:	cd 40                	int    $0x40$/;"	l
ba	user/cowtest1.asm	/^  ba:	0f b6 12             	movzbl (%edx),%edx$/;"	l
ba	user/cowtest2.asm	/^  ba:	29 d0                	sub    %edx,%eax$/;"	l
ba	user/kill.asm	/^  ba:	89 d0                	mov    %edx,%eax$/;"	l
ba	user/sh.asm	/^  ba:	50                   	push   %eax$/;"	l
ba	user/stressfs.asm	/^  ba:	83 c4 08             	add    $0x8,%esp$/;"	l
ba	user/wc.asm	/^  ba:	5b                   	pop    %ebx$/;"	l
ba0	user/usertests.asm	/^     ba0:	75 32                	jne    bd4 <exitwait+0x54>$/;"	l
ba1	user/sh.asm	/^ ba1:	c3                   	ret    $/;"	l
ba2	user/sh.asm	/^ ba2:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
ba2	user/usertests.asm	/^     ba2:	83 ee 01             	sub    $0x1,%esi$/;"	l
ba5	user/usertests.asm	/^     ba5:	75 e3                	jne    b8a <exitwait+0xa>$/;"	l
ba7	user/sh.asm	/^ ba7:	cd 40                	int    $0x40$/;"	l
ba7	user/usertests.asm	/^     ba7:	83 ec 08             	sub    $0x8,%esp$/;"	l
ba9	user/sh.asm	/^ ba9:	c3                   	ret    $/;"	l
baa	user/sh.asm	/^ baa:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
baa	user/usertests.asm	/^     baa:	68 cf 3f 00 00       	push   $0x3fcf$/;"	l
backcmd	user/sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	user/sh.c	/^struct backcmd {$/;"	s	file:
baf	user/sh.asm	/^ baf:	cd 40                	int    $0x40$/;"	l
baf	user/usertests.asm	/^     baf:	6a 01                	push   $0x1$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	user/cat.asm	/^  bb:	e8 23 02 00 00       	call   2e3 <close>$/;"	l
bb	user/cowtest3.asm	/^  bb:	74 04                	je     c1 <strcmp+0x25>$/;"	l
bb	user/forktest.asm	/^  bb:	e8 40 ff ff ff       	call   0 <print>$/;"	l
bb	user/grep.asm	/^  bb:	50                   	push   %eax$/;"	l
bb	user/ln.asm	/^  bb:	83 c2 01             	add    $0x1,%edx$/;"	l
bb	user/ls.asm	/^  bb:	50                   	push   %eax$/;"	l
bb	user/mkdir.asm	/^  bb:	0f b6 c0             	movzbl %al,%eax$/;"	l
bb	user/rm.asm	/^  bb:	0f b6 c0             	movzbl %al,%eax$/;"	l
bb	user/sh.asm	/^  bb:	e8 0a 0b 00 00       	call   bca <exec>$/;"	l
bb	user/usertests.asm	/^      bb:	e8 04 38 00 00       	call   38c4 <printf>$/;"	l
bb	user/wc.asm	/^  bb:	5e                   	pop    %esi$/;"	l
bb	user/zombie.asm	/^  bb:	53                   	push   %ebx$/;"	l
bb1	user/sh.asm	/^ bb1:	c3                   	ret    $/;"	l
bb1	user/usertests.asm	/^     bb1:	e8 0e 2d 00 00       	call   38c4 <printf>$/;"	l
bb2	user/sh.asm	/^ bb2:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
bb6	user/usertests.asm	/^     bb6:	83 c4 10             	add    $0x10,%esp$/;"	l
bb7	user/sh.asm	/^ bb7:	cd 40                	int    $0x40$/;"	l
bb9	user/sh.asm	/^ bb9:	c3                   	ret    $/;"	l
bb9	user/usertests.asm	/^     bb9:	eb 12                	jmp    bcd <exitwait+0x4d>$/;"	l
bba	user/sh.asm	/^ bba:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
bbb	user/usertests.asm	/^     bbb:	83 ec 08             	sub    $0x8,%esp$/;"	l
bbe	user/usertests.asm	/^     bbe:	68 1d 4b 00 00       	push   $0x4b1d$/;"	l
bbf	user/sh.asm	/^ bbf:	cd 40                	int    $0x40$/;"	l
bc	user/cowtest2.asm	/^  bc:	5d                   	pop    %ebp$/;"	l
bc	user/echo.asm	/^  bc:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
bc	user/grep.asm	/^  bc:	83 c2 01             	add    $0x1,%edx$/;"	l
bc	user/init.asm	/^  bc:	68 ac 09 00 00       	push   $0x9ac$/;"	l
bc	user/kill.asm	/^  bc:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
bc	user/ls.asm	/^  bc:	56                   	push   %esi$/;"	l
bc	user/wc.asm	/^  bc:	5f                   	pop    %edi$/;"	l
bc	user/zombie.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc1	user/sh.asm	/^ bc1:	c3                   	ret    $/;"	l
bc2	user/sh.asm	/^ bc2:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
bc3	user/usertests.asm	/^     bc3:	6a 01                	push   $0x1$/;"	l
bc5	user/usertests.asm	/^     bc5:	e8 fa 2c 00 00       	call   38c4 <printf>$/;"	l
bc7	user/sh.asm	/^ bc7:	cd 40                	int    $0x40$/;"	l
bc9	user/sh.asm	/^ bc9:	c3                   	ret    $/;"	l
bca	user/sh.asm	/^ bca:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
bca	user/usertests.asm	/^     bca:	83 c4 10             	add    $0x10,%esp$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcd	user/usertests.asm	/^     bcd:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
bcf	user/sh.asm	/^ bcf:	cd 40                	int    $0x40$/;"	l
bd	user/cowtest1.asm	/^  bd:	29 d0                	sub    %edx,%eax$/;"	l
bd	user/cowtest2.asm	/^  bd:	c3                   	ret    $/;"	l
bd	user/cowtest3.asm	/^  bd:	3a 02                	cmp    (%edx),%al$/;"	l
bd	user/ls.asm	/^  bd:	e8 30 04 00 00       	call   4f2 <fstat>$/;"	l
bd	user/stressfs.asm	/^  bd:	68 39 07 00 00       	push   $0x739$/;"	l
bd	user/wc.asm	/^  bd:	5d                   	pop    %ebp$/;"	l
bd0	user/usertests.asm	/^     bd0:	5b                   	pop    %ebx$/;"	l
bd1	user/sh.asm	/^ bd1:	c3                   	ret    $/;"	l
bd1	user/usertests.asm	/^     bd1:	5e                   	pop    %esi$/;"	l
bd2	user/sh.asm	/^ bd2:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
bd2	user/usertests.asm	/^     bd2:	5d                   	pop    %ebp$/;"	l
bd3	user/usertests.asm	/^     bd3:	c3                   	ret    $/;"	l
bd4	user/usertests.asm	/^     bd4:	83 ec 08             	sub    $0x8,%esp$/;"	l
bd7	user/sh.asm	/^ bd7:	cd 40                	int    $0x40$/;"	l
bd7	user/usertests.asm	/^     bd7:	68 bf 3f 00 00       	push   $0x3fbf$/;"	l
bd9	user/sh.asm	/^ bd9:	c3                   	ret    $/;"	l
bda	user/sh.asm	/^ bda:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
bdc	user/usertests.asm	/^     bdc:	6a 01                	push   $0x1$/;"	l
bde	user/usertests.asm	/^     bde:	e8 e1 2c 00 00       	call   38c4 <printf>$/;"	l
bdf	user/sh.asm	/^ bdf:	cd 40                	int    $0x40$/;"	l
be	user/cowtest2.asm	/^  be:	55                   	push   %ebp$/;"	l
be	user/ln.asm	/^  be:	89 d0                	mov    %edx,%eax$/;"	l
be	user/mkdir.asm	/^  be:	0f b6 12             	movzbl (%edx),%edx$/;"	l
be	user/rm.asm	/^  be:	0f b6 12             	movzbl (%edx),%edx$/;"	l
be	user/wc.asm	/^  be:	c3                   	ret    $/;"	l
be1	user/sh.asm	/^ be1:	c3                   	ret    $/;"	l
be2	user/sh.asm	/^ be2:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
be3	user/usertests.asm	/^     be3:	83 c4 10             	add    $0x10,%esp$/;"	l
be6	user/usertests.asm	/^     be6:	eb e5                	jmp    bcd <exitwait+0x4d>$/;"	l
be7	user/sh.asm	/^ be7:	cd 40                	int    $0x40$/;"	l
be8	user/usertests.asm	/^     be8:	e8 a5 2b 00 00       	call   3792 <exit>$/;"	l
be9	user/sh.asm	/^ be9:	c3                   	ret    $/;"	l
bea	user/sh.asm	/^ bea:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
bed	user/usertests.asm	/^     bed:	55                   	push   %ebp$/;"	l
bee	user/usertests.asm	/^     bee:	89 e5                	mov    %esp,%ebp$/;"	l
bef	user/sh.asm	/^ bef:	cd 40                	int    $0x40$/;"	l
before	user/cowtest1.asm	/^	before = freemem();$/;"	d
before	user/cowtest2.asm	/^	before = freemem();$/;"	d
before	user/cowtest3.asm	/^		before = freemem();$/;"	d
begin_op	log.c	/^begin_op(void)$/;"	f
bf	user/cowtest1.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf	user/cowtest2.asm	/^  bf:	89 e5                	mov    %esp,%ebp$/;"	l
bf	user/cowtest3.asm	/^  bf:	74 ef                	je     b0 <strcmp+0x14>$/;"	l
bf	user/echo.asm	/^  bf:	74 12                	je     d3 <strlen+0x1d>$/;"	l
bf	user/grep.asm	/^  bf:	52                   	push   %edx$/;"	l
bf	user/wc.asm	/^  bf:	83 ec 08             	sub    $0x8,%esp$/;"	l
bf	user/zombie.asm	/^  bf:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
bf0	user/usertests.asm	/^     bf0:	57                   	push   %edi$/;"	l
bf1	user/sh.asm	/^ bf1:	c3                   	ret    $/;"	l
bf1	user/usertests.asm	/^     bf1:	56                   	push   %esi$/;"	l
bf2	user/sh.asm	/^ bf2:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
bf2	user/usertests.asm	/^     bf2:	53                   	push   %ebx$/;"	l
bf3	user/usertests.asm	/^     bf3:	83 ec 14             	sub    $0x14,%esp$/;"	l
bf6	user/usertests.asm	/^     bf6:	68 dc 3f 00 00       	push   $0x3fdc$/;"	l
bf7	user/sh.asm	/^ bf7:	cd 40                	int    $0x40$/;"	l
bf9	user/sh.asm	/^ bf9:	c3                   	ret    $/;"	l
bfa	user/sh.asm	/^ bfa:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
bfb	user/usertests.asm	/^     bfb:	6a 01                	push   $0x1$/;"	l
bfd	user/usertests.asm	/^     bfd:	e8 c2 2c 00 00       	call   38c4 <printf>$/;"	l
bff	user/sh.asm	/^ bff:	cd 40                	int    $0x40$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bigargtest	user/usertests.c	/^bigargtest(void)$/;"	f
bigdir	user/usertests.c	/^bigdir(void)$/;"	f
bigfile	user/usertests.c	/^bigfile(void)$/;"	f
bigwrite	user/usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	user/cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/cowtest1.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/cowtest2.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/cowtest3.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/forktest.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	user/usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	user/cat.c	/^char buf[512];$/;"	v
buf	user/grep.c	/^char buf[1024];$/;"	v
buf	user/usertests.c	/^char buf[8192];$/;"	v
buf	user/wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	user/cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/cowtest1.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/cowtest2.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/cowtest3.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/forktest.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/grep.asm	/^   c:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
c	user/init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ls.asm	/^   c:	e8 18 03 00 00       	call   329 <strlen>$/;"	l
c	user/mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	user/cat.asm	/^  c0:	83 c7 01             	add    $0x1,%edi$/;"	l
c0	user/cowtest1.asm	/^  c0:	c3                   	ret    $/;"	l
c0	user/forktest.asm	/^  c0:	e8 ef 01 00 00       	call   2b4 <exit>$/;"	l
c0	user/grep.asm	/^  c0:	e8 83 ff ff ff       	call   48 <matchhere>$/;"	l
c0	user/kill.asm	/^  c0:	75 f5                	jne    b7 <strlen+0x10>$/;"	l
c0	user/ln.asm	/^  c0:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c0	user/sh.asm	/^  c0:	83 c4 0c             	add    $0xc,%esp$/;"	l
c0	user/usertests.asm	/^      c0:	e8 cd 36 00 00       	call   3792 <exit>$/;"	l
c01	user/sh.asm	/^ c01:	c3                   	ret    $/;"	l
c02	user/sh.asm	/^ c02:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
c02	user/usertests.asm	/^     c02:	e8 0b 2c 00 00       	call   3812 <getpid>$/;"	l
c07	user/sh.asm	/^ c07:	cd 40                	int    $0x40$/;"	l
c07	user/usertests.asm	/^     c07:	89 c6                	mov    %eax,%esi$/;"	l
c09	user/sh.asm	/^ c09:	c3                   	ret    $/;"	l
c09	user/usertests.asm	/^     c09:	e8 7c 2b 00 00       	call   378a <fork>$/;"	l
c0a	user/sh.asm	/^ c0a:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
c0e	user/usertests.asm	/^     c0e:	83 c4 10             	add    $0x10,%esp$/;"	l
c0f	user/sh.asm	/^ c0f:	cd 40                	int    $0x40$/;"	l
c1	user/cowtest1.asm	/^  c1:	55                   	push   %ebp$/;"	l
c1	user/cowtest2.asm	/^  c1:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c1	user/cowtest3.asm	/^  c1:	0f b6 c0             	movzbl %al,%eax$/;"	l
c1	user/echo.asm	/^  c1:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c1	user/init.asm	/^  c1:	68 16 07 00 00       	push   $0x716$/;"	l
c1	user/mkdir.asm	/^  c1:	29 d0                	sub    %edx,%eax$/;"	l
c1	user/rm.asm	/^  c1:	29 d0                	sub    %edx,%eax$/;"	l
c11	user/sh.asm	/^ c11:	c3                   	ret    $/;"	l
c11	user/usertests.asm	/^     c11:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
c12	user/sh.asm	/^ c12:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
c16	user/usertests.asm	/^     c16:	85 c0                	test   %eax,%eax$/;"	l
c17	user/sh.asm	/^ c17:	cd 40                	int    $0x40$/;"	l
c18	user/usertests.asm	/^     c18:	74 11                	je     c2b <mem+0x3e>$/;"	l
c19	user/sh.asm	/^ c19:	c3                   	ret    $/;"	l
c1a	user/sh.asm	/^ c1a:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
c1a	user/usertests.asm	/^     c1a:	e8 7b 2b 00 00       	call   379a <wait>$/;"	l
c1f	user/sh.asm	/^ c1f:	cd 40                	int    $0x40$/;"	l
c1f	user/usertests.asm	/^     c1f:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
c2	user/cowtest1.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c2	user/kill.asm	/^  c2:	5d                   	pop    %ebp$/;"	l
c2	user/ls.asm	/^  c2:	83 c4 10             	add    $0x10,%esp$/;"	l
c2	user/stressfs.asm	/^  c2:	6a 01                	push   $0x1$/;"	l
c2	user/wc.asm	/^  c2:	68 76 07 00 00       	push   $0x776$/;"	l
c2	user/zombie.asm	/^  c2:	0f b6 10             	movzbl (%eax),%edx$/;"	l
c21	user/sh.asm	/^ c21:	c3                   	ret    $/;"	l
c22	user/sh.asm	/^ c22:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
c22	user/usertests.asm	/^     c22:	5b                   	pop    %ebx$/;"	l
c23	user/usertests.asm	/^     c23:	5e                   	pop    %esi$/;"	l
c24	user/usertests.asm	/^     c24:	5f                   	pop    %edi$/;"	l
c25	user/usertests.asm	/^     c25:	5d                   	pop    %ebp$/;"	l
c26	user/usertests.asm	/^     c26:	c3                   	ret    $/;"	l
c27	user/sh.asm	/^ c27:	cd 40                	int    $0x40$/;"	l
c27	user/usertests.asm	/^     c27:	89 18                	mov    %ebx,(%eax)$/;"	l
c29	user/sh.asm	/^ c29:	c3                   	ret    $/;"	l
c29	user/usertests.asm	/^     c29:	89 c3                	mov    %eax,%ebx$/;"	l
c2a	user/sh.asm	/^ c2a:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
c2b	user/usertests.asm	/^     c2b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c2e	user/usertests.asm	/^     c2e:	68 11 27 00 00       	push   $0x2711$/;"	l
c2f	user/sh.asm	/^ c2f:	cd 40                	int    $0x40$/;"	l
c3	user/cat.asm	/^  c3:	83 c3 04             	add    $0x4,%ebx$/;"	l
c3	user/kill.asm	/^  c3:	c3                   	ret    $/;"	l
c3	user/mkdir.asm	/^  c3:	5d                   	pop    %ebp$/;"	l
c3	user/rm.asm	/^  c3:	5d                   	pop    %ebp$/;"	l
c3	user/sh.asm	/^  c3:	ff 73 04             	pushl  0x4(%ebx)$/;"	l
c31	user/sh.asm	/^ c31:	c3                   	ret    $/;"	l
c32	user/sh.asm	/^ c32:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
c33	user/usertests.asm	/^     c33:	e8 ca 2e 00 00       	call   3b02 <malloc>$/;"	l
c37	user/sh.asm	/^ c37:	cd 40                	int    $0x40$/;"	l
c38	user/usertests.asm	/^     c38:	83 c4 10             	add    $0x10,%esp$/;"	l
c39	user/sh.asm	/^ c39:	c3                   	ret    $/;"	l
c3a	user/sh.asm	/^ c3a:	55                   	push   %ebp$/;"	l
c3b	user/sh.asm	/^ c3b:	89 e5                	mov    %esp,%ebp$/;"	l
c3b	user/usertests.asm	/^     c3b:	85 c0                	test   %eax,%eax$/;"	l
c3d	user/sh.asm	/^ c3d:	57                   	push   %edi$/;"	l
c3d	user/usertests.asm	/^     c3d:	75 e8                	jne    c27 <mem+0x3a>$/;"	l
c3e	user/sh.asm	/^ c3e:	56                   	push   %esi$/;"	l
c3f	user/sh.asm	/^ c3f:	53                   	push   %ebx$/;"	l
c3f	user/usertests.asm	/^     c3f:	85 db                	test   %ebx,%ebx$/;"	l
c4	user/cowtest1.asm	/^  c4:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c4	user/cowtest2.asm	/^  c4:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
c4	user/cowtest3.asm	/^  c4:	0f b6 12             	movzbl (%edx),%edx$/;"	l
c4	user/kill.asm	/^  c4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c4	user/ln.asm	/^  c4:	75 f5                	jne    bb <strlen+0x10>$/;"	l
c4	user/mkdir.asm	/^  c4:	c3                   	ret    $/;"	l
c4	user/rm.asm	/^  c4:	c3                   	ret    $/;"	l
c4	user/stressfs.asm	/^  c4:	e8 3a 03 00 00       	call   403 <printf>$/;"	l
c40	user/sh.asm	/^ c40:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
c41	user/usertests.asm	/^     c41:	74 14                	je     c57 <mem+0x6a>$/;"	l
c43	user/sh.asm	/^ c43:	89 c6                	mov    %eax,%esi$/;"	l
c43	user/usertests.asm	/^     c43:	8b 3b                	mov    (%ebx),%edi$/;"	l
c45	user/sh.asm	/^ c45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
c45	user/usertests.asm	/^     c45:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c48	user/usertests.asm	/^     c48:	53                   	push   %ebx$/;"	l
c49	user/sh.asm	/^ c49:	74 14                	je     c5f <printint+0x25>$/;"	l
c49	user/usertests.asm	/^     c49:	e8 46 2e 00 00       	call   3a94 <free>$/;"	l
c4b	user/sh.asm	/^ c4b:	85 d2                	test   %edx,%edx$/;"	l
c4d	user/sh.asm	/^ c4d:	79 10                	jns    c5f <printint+0x25>$/;"	l
c4e	user/usertests.asm	/^     c4e:	89 fb                	mov    %edi,%ebx$/;"	l
c4f	user/sh.asm	/^ c4f:	f7 da                	neg    %edx$/;"	l
c5	user/forktest.asm	/^  c5:	83 ec 08             	sub    $0x8,%esp$/;"	l
c5	user/grep.asm	/^  c5:	83 c4 10             	add    $0x10,%esp$/;"	l
c5	user/ls.asm	/^  c5:	85 c0                	test   %eax,%eax$/;"	l
c5	user/mkdir.asm	/^  c5:	55                   	push   %ebp$/;"	l
c5	user/rm.asm	/^  c5:	55                   	push   %ebp$/;"	l
c5	user/usertests.asm	/^      c5:	83 ec 08             	sub    $0x8,%esp$/;"	l
c5	user/zombie.asm	/^  c5:	84 d2                	test   %dl,%dl$/;"	l
c50	user/usertests.asm	/^     c50:	83 c4 10             	add    $0x10,%esp$/;"	l
c51	user/sh.asm	/^ c51:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)$/;"	l
c53	user/usertests.asm	/^     c53:	85 ff                	test   %edi,%edi$/;"	l
c55	user/usertests.asm	/^     c55:	75 ec                	jne    c43 <mem+0x56>$/;"	l
c57	user/usertests.asm	/^     c57:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c58	user/sh.asm	/^ c58:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
c5a	user/usertests.asm	/^     c5a:	68 00 50 00 00       	push   $0x5000$/;"	l
c5d	user/sh.asm	/^ c5d:	eb 0b                	jmp    c6a <printint+0x30>$/;"	l
c5f	user/sh.asm	/^ c5f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)$/;"	l
c5f	user/usertests.asm	/^     c5f:	e8 9e 2e 00 00       	call   3b02 <malloc>$/;"	l
c6	user/cat.asm	/^  c6:	83 c4 10             	add    $0x10,%esp$/;"	l
c6	user/echo.asm	/^  c6:	83 c2 01             	add    $0x1,%edx$/;"	l
c6	user/init.asm	/^  c6:	e8 0c 02 00 00       	call   2d7 <exec>$/;"	l
c6	user/ln.asm	/^  c6:	5d                   	pop    %ebp$/;"	l
c6	user/mkdir.asm	/^  c6:	89 e5                	mov    %esp,%ebp$/;"	l
c6	user/rm.asm	/^  c6:	89 e5                	mov    %esp,%ebp$/;"	l
c6	user/sh.asm	/^  c6:	68 eb 0f 00 00       	push   $0xfeb$/;"	l
c64	user/usertests.asm	/^     c64:	83 c4 10             	add    $0x10,%esp$/;"	l
c66	user/sh.asm	/^ c66:	eb f0                	jmp    c58 <printint+0x1e>$/;"	l
c67	user/usertests.asm	/^     c67:	85 c0                	test   %eax,%eax$/;"	l
c68	user/sh.asm	/^ c68:	89 df                	mov    %ebx,%edi$/;"	l
c69	user/usertests.asm	/^     c69:	74 1d                	je     c88 <mem+0x9b>$/;"	l
c6a	user/sh.asm	/^ c6a:	8d 5f 01             	lea    0x1(%edi),%ebx$/;"	l
c6b	user/usertests.asm	/^     c6b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c6d	user/sh.asm	/^ c6d:	89 d0                	mov    %edx,%eax$/;"	l
c6e	user/usertests.asm	/^     c6e:	50                   	push   %eax$/;"	l
c6f	user/sh.asm	/^ c6f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c6f	user/usertests.asm	/^     c6f:	e8 20 2e 00 00       	call   3a94 <free>$/;"	l
c7	user/cowtest1.asm	/^  c7:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
c7	user/cowtest2.asm	/^  c7:	74 12                	je     db <strlen+0x1d>$/;"	l
c7	user/cowtest3.asm	/^  c7:	29 d0                	sub    %edx,%eax$/;"	l
c7	user/ln.asm	/^  c7:	c3                   	ret    $/;"	l
c7	user/ls.asm	/^  c7:	78 77                	js     140 <ls+0xae>$/;"	l
c7	user/wc.asm	/^  c7:	6a 01                	push   $0x1$/;"	l
c7	user/zombie.asm	/^  c7:	74 1e                	je     e7 <strchr+0x2f>$/;"	l
c74	user/sh.asm	/^ c74:	f7 f1                	div    %ecx$/;"	l
c74	user/usertests.asm	/^     c74:	83 c4 08             	add    $0x8,%esp$/;"	l
c76	user/sh.asm	/^ c76:	0f b6 92 cc 10 00 00 	movzbl 0x10cc(%edx),%edx$/;"	l
c77	user/usertests.asm	/^     c77:	68 00 40 00 00       	push   $0x4000$/;"	l
c7c	user/usertests.asm	/^     c7c:	6a 01                	push   $0x1$/;"	l
c7d	user/sh.asm	/^ c7d:	88 54 1d d7          	mov    %dl,-0x29(%ebp,%ebx,1)$/;"	l
c7e	user/usertests.asm	/^     c7e:	e8 41 2c 00 00       	call   38c4 <printf>$/;"	l
c8	user/forktest.asm	/^  c8:	68 1b 07 00 00       	push   $0x71b$/;"	l
c8	user/grep.asm	/^  c8:	eb bd                	jmp    87 <matchhere+0x3f>$/;"	l
c8	user/ln.asm	/^  c8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c8	user/mkdir.asm	/^  c8:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c8	user/rm.asm	/^  c8:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c8	user/usertests.asm	/^      c8:	68 27 3c 00 00       	push   $0x3c27$/;"	l
c81	user/sh.asm	/^ c81:	89 c2                	mov    %eax,%edx$/;"	l
c83	user/sh.asm	/^ c83:	85 c0                	test   %eax,%eax$/;"	l
c83	user/usertests.asm	/^     c83:	e8 0a 2b 00 00       	call   3792 <exit>$/;"	l
c85	user/sh.asm	/^ c85:	75 e1                	jne    c68 <printint+0x2e>$/;"	l
c87	user/sh.asm	/^ c87:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)$/;"	l
c88	user/usertests.asm	/^     c88:	83 ec 08             	sub    $0x8,%esp$/;"	l
c8b	user/sh.asm	/^ c8b:	74 08                	je     c95 <printint+0x5b>$/;"	l
c8b	user/usertests.asm	/^     c8b:	68 e6 3f 00 00       	push   $0x3fe6$/;"	l
c8d	user/sh.asm	/^ c8d:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)$/;"	l
c9	user/cat.asm	/^  c9:	39 7d e4             	cmp    %edi,-0x1c(%ebp)$/;"	l
c9	user/cowtest2.asm	/^  c9:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c9	user/cowtest3.asm	/^  c9:	5d                   	pop    %ebp$/;"	l
c9	user/echo.asm	/^  c9:	89 d0                	mov    %edx,%eax$/;"	l
c9	user/kill.asm	/^  c9:	eb f7                	jmp    c2 <strlen+0x1b>$/;"	l
c9	user/ls.asm	/^  c9:	0f b7 85 c4 fd ff ff 	movzwl -0x23c(%ebp),%eax$/;"	l
c9	user/stressfs.asm	/^  c9:	83 c4 08             	add    $0x8,%esp$/;"	l
c9	user/wc.asm	/^  c9:	e8 8b 03 00 00       	call   459 <printf>$/;"	l
c9	user/zombie.asm	/^  c9:	89 d9                	mov    %ebx,%ecx$/;"	l
c90	user/usertests.asm	/^     c90:	6a 01                	push   $0x1$/;"	l
c92	user/sh.asm	/^ c92:	8d 5f 02             	lea    0x2(%edi),%ebx$/;"	l
c92	user/usertests.asm	/^     c92:	e8 2d 2c 00 00       	call   38c4 <printf>$/;"	l
c95	user/sh.asm	/^ c95:	83 eb 01             	sub    $0x1,%ebx$/;"	l
c97	user/usertests.asm	/^     c97:	89 34 24             	mov    %esi,(%esp)$/;"	l
c98	user/sh.asm	/^ c98:	78 22                	js     cbc <printint+0x82>$/;"	l
c9a	user/sh.asm	/^ c9a:	8d 7d d7             	lea    -0x29(%ebp),%edi$/;"	l
c9a	user/usertests.asm	/^     c9a:	e8 23 2b 00 00       	call   37c2 <kill>$/;"	l
c9d	user/sh.asm	/^ c9d:	0f b6 44 1d d8       	movzbl -0x28(%ebp,%ebx,1),%eax$/;"	l
c9f	user/usertests.asm	/^     c9f:	e8 ee 2a 00 00       	call   3792 <exit>$/;"	l
ca	user/cowtest1.asm	/^  ca:	74 12                	je     de <strlen+0x1d>$/;"	l
ca	user/cowtest3.asm	/^  ca:	c3                   	ret    $/;"	l
ca	user/grep.asm	/^  ca:	55                   	push   %ebp$/;"	l
ca2	user/sh.asm	/^ ca2:	88 45 d7             	mov    %al,-0x29(%ebp)$/;"	l
ca4	user/usertests.asm	/^     ca4:	55                   	push   %ebp$/;"	l
ca5	user/sh.asm	/^ ca5:	83 ec 04             	sub    $0x4,%esp$/;"	l
ca5	user/usertests.asm	/^     ca5:	89 e5                	mov    %esp,%ebp$/;"	l
ca7	user/usertests.asm	/^     ca7:	57                   	push   %edi$/;"	l
ca8	user/sh.asm	/^ ca8:	6a 01                	push   $0x1$/;"	l
ca8	user/usertests.asm	/^     ca8:	56                   	push   %esi$/;"	l
ca9	user/usertests.asm	/^     ca9:	53                   	push   %ebx$/;"	l
caa	user/sh.asm	/^ caa:	57                   	push   %edi$/;"	l
caa	user/usertests.asm	/^     caa:	83 ec 34             	sub    $0x34,%esp$/;"	l
cab	user/sh.asm	/^ cab:	56                   	push   %esi$/;"	l
cac	user/sh.asm	/^ cac:	e8 01 ff ff ff       	call   bb2 <write>$/;"	l
cad	user/usertests.asm	/^     cad:	68 08 40 00 00       	push   $0x4008$/;"	l
cat	user/cat.c	/^cat(int fd)$/;"	f
cb	user/cowtest3.asm	/^  cb:	55                   	push   %ebp$/;"	l
cb	user/echo.asm	/^  cb:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
cb	user/grep.asm	/^  cb:	89 e5                	mov    %esp,%ebp$/;"	l
cb	user/init.asm	/^  cb:	83 c4 08             	add    $0x8,%esp$/;"	l
cb	user/kill.asm	/^  cb:	55                   	push   %ebp$/;"	l
cb	user/mkdir.asm	/^  cb:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
cb	user/rm.asm	/^  cb:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
cb	user/sh.asm	/^  cb:	6a 02                	push   $0x2$/;"	l
cb	user/zombie.asm	/^  cb:	38 d3                	cmp    %dl,%bl$/;"	l
cb1	user/sh.asm	/^ cb1:	83 eb 01             	sub    $0x1,%ebx$/;"	l
cb2	user/usertests.asm	/^     cb2:	6a 01                	push   $0x1$/;"	l
cb4	user/sh.asm	/^ cb4:	83 c4 10             	add    $0x10,%esp$/;"	l
cb4	user/usertests.asm	/^     cb4:	e8 0b 2c 00 00       	call   38c4 <printf>$/;"	l
cb7	user/sh.asm	/^ cb7:	83 fb ff             	cmp    $0xffffffff,%ebx$/;"	l
cb9	user/usertests.asm	/^     cb9:	c7 04 24 17 40 00 00 	movl   $0x4017,(%esp)$/;"	l
cba	user/sh.asm	/^ cba:	75 e1                	jne    c9d <printint+0x63>$/;"	l
cbc	user/sh.asm	/^ cbc:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
cbf	user/sh.asm	/^ cbf:	5b                   	pop    %ebx$/;"	l
cc	user/cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/cat.asm	/^  cc:	75 c9                	jne    97 <main+0x29>$/;"	l
cc	user/cowtest1.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/cowtest1.asm	/^  cc:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
cc	user/cowtest2.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/cowtest3.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/cowtest3.asm	/^  cc:	89 e5                	mov    %esp,%ebp$/;"	l
cc	user/echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/kill.asm	/^  cc:	89 e5                	mov    %esp,%ebp$/;"	l
cc	user/ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/stressfs.asm	/^  cc:	6a 00                	push   $0x0$/;"	l
cc	user/usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	user/sh.asm	/^ cc0:	5e                   	pop    %esi$/;"	l
cc0	user/usertests.asm	/^     cc0:	e8 1d 2b 00 00       	call   37e2 <unlink>$/;"	l
cc1	user/sh.asm	/^ cc1:	5f                   	pop    %edi$/;"	l
cc2	user/sh.asm	/^ cc2:	5d                   	pop    %ebp$/;"	l
cc3	user/sh.asm	/^ cc3:	c3                   	ret    $/;"	l
cc4	user/sh.asm	/^ cc4:	55                   	push   %ebp$/;"	l
cc5	user/sh.asm	/^ cc5:	89 e5                	mov    %esp,%ebp$/;"	l
cc5	user/usertests.asm	/^     cc5:	83 c4 08             	add    $0x8,%esp$/;"	l
cc7	user/sh.asm	/^ cc7:	57                   	push   %edi$/;"	l
cc8	user/sh.asm	/^ cc8:	56                   	push   %esi$/;"	l
cc8	user/usertests.asm	/^     cc8:	68 02 02 00 00       	push   $0x202$/;"	l
cc9	user/sh.asm	/^ cc9:	53                   	push   %ebx$/;"	l
cca	user/sh.asm	/^ cca:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
ccd	user/sh.asm	/^ ccd:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
ccd	user/usertests.asm	/^     ccd:	68 17 40 00 00       	push   $0x4017$/;"	l
cd	user/forktest.asm	/^  cd:	6a 01                	push   $0x1$/;"	l
cd	user/grep.asm	/^  cd:	56                   	push   %esi$/;"	l
cd	user/ln.asm	/^  cd:	eb f7                	jmp    c6 <strlen+0x1b>$/;"	l
cd	user/sh.asm	/^  cd:	e8 f2 0b 00 00       	call   cc4 <printf>$/;"	l
cd	user/usertests.asm	/^      cd:	ff 35 0c 5c 00 00    	pushl  0x5c0c$/;"	l
cd	user/zombie.asm	/^  cd:	74 15                	je     e4 <strchr+0x2c>$/;"	l
cd0	user/sh.asm	/^ cd0:	0f b6 1e             	movzbl (%esi),%ebx$/;"	l
cd2	user/usertests.asm	/^     cd2:	e8 fb 2a 00 00       	call   37d2 <open>$/;"	l
cd3	user/sh.asm	/^ cd3:	84 db                	test   %bl,%bl$/;"	l
cd5	user/sh.asm	/^ cd5:	0f 84 b1 01 00 00    	je     e8c <printf+0x1c8>$/;"	l
cd7	user/usertests.asm	/^     cd7:	83 c4 10             	add    $0x10,%esp$/;"	l
cda	user/usertests.asm	/^     cda:	85 c0                	test   %eax,%eax$/;"	l
cdb	user/sh.asm	/^ cdb:	83 c6 01             	add    $0x1,%esi$/;"	l
cdc	user/usertests.asm	/^     cdc:	78 4a                	js     d28 <sharedfd+0x84>$/;"	l
cde	user/sh.asm	/^ cde:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
cde	user/usertests.asm	/^     cde:	89 c6                	mov    %eax,%esi$/;"	l
ce	user/cat.asm	/^  ce:	e8 e8 01 00 00       	call   2bb <exit>$/;"	l
ce	user/cowtest2.asm	/^  ce:	83 c2 01             	add    $0x1,%edx$/;"	l
ce	user/cowtest3.asm	/^  ce:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
ce	user/grep.asm	/^  ce:	53                   	push   %ebx$/;"	l
ce	user/init.asm	/^  ce:	68 19 07 00 00       	push   $0x719$/;"	l
ce	user/kill.asm	/^  ce:	57                   	push   %edi$/;"	l
ce	user/mkdir.asm	/^  ce:	74 12                	je     e2 <strlen+0x1d>$/;"	l
ce	user/rm.asm	/^  ce:	74 12                	je     e2 <strlen+0x1d>$/;"	l
ce	user/stressfs.asm	/^  ce:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
ce	user/wc.asm	/^  ce:	e8 54 02 00 00       	call   327 <exit>$/;"	l
ce0	user/usertests.asm	/^     ce0:	e8 a5 2a 00 00       	call   378a <fork>$/;"	l
ce1	user/sh.asm	/^ ce1:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
ce4	user/sh.asm	/^ ce4:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ce5	user/usertests.asm	/^     ce5:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
ce8	user/usertests.asm	/^     ce8:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ce9	user/sh.asm	/^ ce9:	eb 2d                	jmp    d18 <printf+0x54>$/;"	l
ceb	user/sh.asm	/^ ceb:	88 5d e2             	mov    %bl,-0x1e(%ebp)$/;"	l
ceb	user/usertests.asm	/^     ceb:	19 c0                	sbb    %eax,%eax$/;"	l
ced	user/usertests.asm	/^     ced:	83 e0 f3             	and    $0xfffffff3,%eax$/;"	l
cee	user/sh.asm	/^ cee:	83 ec 04             	sub    $0x4,%esp$/;"	l
cf	user/echo.asm	/^  cf:	75 f5                	jne    c6 <strlen+0x10>$/;"	l
cf	user/forktest.asm	/^  cf:	e8 2c ff ff ff       	call   0 <print>$/;"	l
cf	user/grep.asm	/^  cf:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
cf	user/kill.asm	/^  cf:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
cf	user/ln.asm	/^  cf:	55                   	push   %ebp$/;"	l
cf	user/zombie.asm	/^  cf:	83 c0 01             	add    $0x1,%eax$/;"	l
cf0	user/usertests.asm	/^     cf0:	83 c0 70             	add    $0x70,%eax$/;"	l
cf1	user/sh.asm	/^ cf1:	6a 01                	push   $0x1$/;"	l
cf3	user/sh.asm	/^ cf3:	8d 45 e2             	lea    -0x1e(%ebp),%eax$/;"	l
cf3	user/usertests.asm	/^     cf3:	83 ec 04             	sub    $0x4,%esp$/;"	l
cf6	user/sh.asm	/^ cf6:	50                   	push   %eax$/;"	l
cf6	user/usertests.asm	/^     cf6:	6a 0a                	push   $0xa$/;"	l
cf7	user/sh.asm	/^ cf7:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
cf8	user/usertests.asm	/^     cf8:	50                   	push   %eax$/;"	l
cf9	user/usertests.asm	/^     cf9:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
cfa	user/sh.asm	/^ cfa:	e8 b3 fe ff ff       	call   bb2 <write>$/;"	l
cfc	user/usertests.asm	/^     cfc:	50                   	push   %eax$/;"	l
cfd	user/usertests.asm	/^     cfd:	e8 43 29 00 00       	call   3645 <memset>$/;"	l
cff	user/sh.asm	/^ cff:	83 c4 10             	add    $0x10,%esp$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	user/sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	user/usertests.c	/^concreate(void)$/;"	f
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon2	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpuid	proc.c	/^cpuid() {$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	user/usertests.c	/^createdelete(void)$/;"	f
createtest	user/usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	user/cowtest1.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/cowtest2.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/cowtest3.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/echo.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/init.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/kill.asm	/^   d:	56                   	push   %esi$/;"	l
d	user/ln.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/mkdir.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/rm.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/stressfs.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	user/ln.asm	/^  d0:	89 e5                	mov    %esp,%ebp$/;"	l
d0	user/ls.asm	/^  d0:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
d0	user/mkdir.asm	/^  d0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d0	user/rm.asm	/^  d0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d02	user/sh.asm	/^ d02:	eb 05                	jmp    d09 <printf+0x45>$/;"	l
d02	user/usertests.asm	/^     d02:	83 c4 10             	add    $0x10,%esp$/;"	l
d04	user/sh.asm	/^ d04:	83 ff 25             	cmp    $0x25,%edi$/;"	l
d05	user/usertests.asm	/^     d05:	bb e8 03 00 00       	mov    $0x3e8,%ebx$/;"	l
d07	user/sh.asm	/^ d07:	74 22                	je     d2b <printf+0x67>$/;"	l
d09	user/sh.asm	/^ d09:	83 c6 01             	add    $0x1,%esi$/;"	l
d0a	user/usertests.asm	/^     d0a:	8d 7d de             	lea    -0x22(%ebp),%edi$/;"	l
d0c	user/sh.asm	/^ d0c:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx$/;"	l
d0d	user/usertests.asm	/^     d0d:	83 ec 04             	sub    $0x4,%esp$/;"	l
d1	user/cowtest1.asm	/^  d1:	83 c2 01             	add    $0x1,%edx$/;"	l
d1	user/cowtest2.asm	/^  d1:	89 d0                	mov    %edx,%eax$/;"	l
d1	user/cowtest3.asm	/^  d1:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
d1	user/echo.asm	/^  d1:	5d                   	pop    %ebp$/;"	l
d1	user/stressfs.asm	/^  d1:	50                   	push   %eax$/;"	l
d10	user/sh.asm	/^ d10:	84 db                	test   %bl,%bl$/;"	l
d10	user/usertests.asm	/^     d10:	6a 0a                	push   $0xa$/;"	l
d12	user/sh.asm	/^ d12:	0f 84 74 01 00 00    	je     e8c <printf+0x1c8>$/;"	l
d12	user/usertests.asm	/^     d12:	57                   	push   %edi$/;"	l
d13	user/usertests.asm	/^     d13:	56                   	push   %esi$/;"	l
d14	user/usertests.asm	/^     d14:	e8 99 2a 00 00       	call   37b2 <write>$/;"	l
d18	user/sh.asm	/^ d18:	0f be d3             	movsbl %bl,%edx$/;"	l
d19	user/usertests.asm	/^     d19:	83 c4 10             	add    $0x10,%esp$/;"	l
d1b	user/sh.asm	/^ d1b:	0f b6 c3             	movzbl %bl,%eax$/;"	l
d1c	user/usertests.asm	/^     d1c:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
d1e	user/sh.asm	/^ d1e:	85 ff                	test   %edi,%edi$/;"	l
d1f	user/usertests.asm	/^     d1f:	75 1e                	jne    d3f <sharedfd+0x9b>$/;"	l
d2	user/echo.asm	/^  d2:	c3                   	ret    $/;"	l
d2	user/grep.asm	/^  d2:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
d2	user/kill.asm	/^  d2:	89 d7                	mov    %edx,%edi$/;"	l
d2	user/ln.asm	/^  d2:	57                   	push   %edi$/;"	l
d2	user/sh.asm	/^  d2:	83 c4 10             	add    $0x10,%esp$/;"	l
d2	user/stressfs.asm	/^  d2:	e8 3a 02 00 00       	call   311 <open>$/;"	l
d2	user/zombie.asm	/^  d2:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d20	user/sh.asm	/^ d20:	75 e2                	jne    d04 <printf+0x40>$/;"	l
d21	user/usertests.asm	/^     d21:	83 eb 01             	sub    $0x1,%ebx$/;"	l
d22	user/sh.asm	/^ d22:	83 f8 25             	cmp    $0x25,%eax$/;"	l
d24	user/usertests.asm	/^     d24:	75 e7                	jne    d0d <sharedfd+0x69>$/;"	l
d25	user/sh.asm	/^ d25:	75 c4                	jne    ceb <printf+0x27>$/;"	l
d26	user/usertests.asm	/^     d26:	eb 29                	jmp    d51 <sharedfd+0xad>$/;"	l
d27	user/sh.asm	/^ d27:	89 c7                	mov    %eax,%edi$/;"	l
d28	user/usertests.asm	/^     d28:	83 ec 08             	sub    $0x8,%esp$/;"	l
d29	user/sh.asm	/^ d29:	eb de                	jmp    d09 <printf+0x45>$/;"	l
d2b	user/sh.asm	/^ d2b:	83 f8 64             	cmp    $0x64,%eax$/;"	l
d2b	user/usertests.asm	/^     d2b:	68 dc 4c 00 00       	push   $0x4cdc$/;"	l
d2e	user/sh.asm	/^ d2e:	74 59                	je     d89 <printf+0xc5>$/;"	l
d3	user/cat.asm	/^  d3:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d3	user/cowtest2.asm	/^  d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
d3	user/echo.asm	/^  d3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d3	user/init.asm	/^  d3:	6a 01                	push   $0x1$/;"	l
d3	user/ln.asm	/^  d3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d3	user/usertests.asm	/^      d3:	e8 ec 37 00 00       	call   38c4 <printf>$/;"	l
d3	user/wc.asm	/^  d3:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
d30	user/sh.asm	/^ d30:	81 e2 f7 00 00 00    	and    $0xf7,%edx$/;"	l
d30	user/usertests.asm	/^     d30:	6a 01                	push   $0x1$/;"	l
d32	user/usertests.asm	/^     d32:	e8 8d 2b 00 00       	call   38c4 <printf>$/;"	l
d36	user/sh.asm	/^ d36:	83 fa 70             	cmp    $0x70,%edx$/;"	l
d37	user/usertests.asm	/^     d37:	83 c4 10             	add    $0x10,%esp$/;"	l
d39	user/sh.asm	/^ d39:	74 7a                	je     db5 <printf+0xf1>$/;"	l
d3a	user/usertests.asm	/^     d3a:	e9 dd 00 00 00       	jmp    e1c <sharedfd+0x178>$/;"	l
d3b	user/sh.asm	/^ d3b:	83 f8 73             	cmp    $0x73,%eax$/;"	l
d3e	user/sh.asm	/^ d3e:	0f 84 9d 00 00 00    	je     de1 <printf+0x11d>$/;"	l
d3f	user/usertests.asm	/^     d3f:	83 ec 08             	sub    $0x8,%esp$/;"	l
d4	user/cowtest1.asm	/^  d4:	89 d0                	mov    %edx,%eax$/;"	l
d4	user/cowtest3.asm	/^  d4:	74 12                	je     e8 <strlen+0x1d>$/;"	l
d4	user/forktest.asm	/^  d4:	e8 db 01 00 00       	call   2b4 <exit>$/;"	l
d4	user/kill.asm	/^  d4:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d4	user/ls.asm	/^  d4:	0f 84 83 00 00 00    	je     15d <ls+0xcb>$/;"	l
d42	user/usertests.asm	/^     d42:	68 08 4d 00 00       	push   $0x4d08$/;"	l
d44	user/sh.asm	/^ d44:	83 f8 63             	cmp    $0x63,%eax$/;"	l
d47	user/sh.asm	/^ d47:	0f 84 f2 00 00 00    	je     e3f <printf+0x17b>$/;"	l
d47	user/usertests.asm	/^     d47:	6a 01                	push   $0x1$/;"	l
d49	user/usertests.asm	/^     d49:	e8 76 2b 00 00       	call   38c4 <printf>$/;"	l
d4d	user/sh.asm	/^ d4d:	83 f8 25             	cmp    $0x25,%eax$/;"	l
d4e	user/usertests.asm	/^     d4e:	83 c4 10             	add    $0x10,%esp$/;"	l
d5	user/grep.asm	/^  d5:	80 3e 5e             	cmpb   $0x5e,(%esi)$/;"	l
d5	user/init.asm	/^  d5:	e8 f7 02 00 00       	call   3d1 <printf>$/;"	l
d5	user/mkdir.asm	/^  d5:	83 c2 01             	add    $0x1,%edx$/;"	l
d5	user/rm.asm	/^  d5:	83 c2 01             	add    $0x1,%edx$/;"	l
d5	user/sh.asm	/^  d5:	e9 3a 01 00 00       	jmp    214 <runcmd+0x196>$/;"	l
d5	user/zombie.asm	/^  d5:	84 d2                	test   %dl,%dl$/;"	l
d50	user/sh.asm	/^ d50:	0f 84 15 01 00 00    	je     e6b <printf+0x1a7>$/;"	l
d51	user/usertests.asm	/^     d51:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)$/;"	l
d55	user/usertests.asm	/^     d55:	74 51                	je     da8 <sharedfd+0x104>$/;"	l
d56	user/sh.asm	/^ d56:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)$/;"	l
d57	user/usertests.asm	/^     d57:	e8 3e 2a 00 00       	call   379a <wait>$/;"	l
d5a	user/sh.asm	/^ d5a:	83 ec 04             	sub    $0x4,%esp$/;"	l
d5c	user/usertests.asm	/^     d5c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d5d	user/sh.asm	/^ d5d:	6a 01                	push   $0x1$/;"	l
d5f	user/sh.asm	/^ d5f:	8d 45 e7             	lea    -0x19(%ebp),%eax$/;"	l
d5f	user/usertests.asm	/^     d5f:	56                   	push   %esi$/;"	l
d6	user/cat.asm	/^  d6:	6a 00                	push   $0x0$/;"	l
d6	user/cowtest1.asm	/^  d6:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
d6	user/cowtest3.asm	/^  d6:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d6	user/ln.asm	/^  d6:	89 d7                	mov    %edx,%edi$/;"	l
d60	user/usertests.asm	/^     d60:	e8 55 2a 00 00       	call   37ba <close>$/;"	l
d62	user/sh.asm	/^ d62:	50                   	push   %eax$/;"	l
d63	user/sh.asm	/^ d63:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
d65	user/usertests.asm	/^     d65:	83 c4 08             	add    $0x8,%esp$/;"	l
d66	user/sh.asm	/^ d66:	e8 47 fe ff ff       	call   bb2 <write>$/;"	l
d68	user/usertests.asm	/^     d68:	6a 00                	push   $0x0$/;"	l
d6a	user/usertests.asm	/^     d6a:	68 17 40 00 00       	push   $0x4017$/;"	l
d6b	user/sh.asm	/^ d6b:	88 5d e6             	mov    %bl,-0x1a(%ebp)$/;"	l
d6e	user/sh.asm	/^ d6e:	83 c4 0c             	add    $0xc,%esp$/;"	l
d6f	user/usertests.asm	/^     d6f:	e8 5e 2a 00 00       	call   37d2 <open>$/;"	l
d7	user/cowtest2.asm	/^  d7:	75 f5                	jne    ce <strlen+0x10>$/;"	l
d7	user/kill.asm	/^  d7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d7	user/stressfs.asm	/^  d7:	89 c6                	mov    %eax,%esi$/;"	l
d7	user/wc.asm	/^  d7:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
d7	user/zombie.asm	/^  d7:	74 06                	je     df <strchr+0x27>$/;"	l
d71	user/sh.asm	/^ d71:	6a 01                	push   $0x1$/;"	l
d73	user/sh.asm	/^ d73:	8d 45 e6             	lea    -0x1a(%ebp),%eax$/;"	l
d74	user/usertests.asm	/^     d74:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
d76	user/sh.asm	/^ d76:	50                   	push   %eax$/;"	l
d77	user/sh.asm	/^ d77:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
d77	user/usertests.asm	/^     d77:	83 c4 10             	add    $0x10,%esp$/;"	l
d7a	user/sh.asm	/^ d7a:	e8 33 fe ff ff       	call   bb2 <write>$/;"	l
d7a	user/usertests.asm	/^     d7a:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
d7f	user/sh.asm	/^ d7f:	83 c4 10             	add    $0x10,%esp$/;"	l
d7f	user/usertests.asm	/^     d7f:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
d8	user/cat.asm	/^  d8:	e8 23 ff ff ff       	call   0 <cat>$/;"	l
d8	user/echo.asm	/^  d8:	eb f7                	jmp    d1 <strlen+0x1b>$/;"	l
d8	user/grep.asm	/^  d8:	74 1c                	je     f6 <match+0x2c>$/;"	l
d8	user/ln.asm	/^  d8:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d8	user/mkdir.asm	/^  d8:	89 d0                	mov    %edx,%eax$/;"	l
d8	user/rm.asm	/^  d8:	89 d0                	mov    %edx,%eax$/;"	l
d8	user/usertests.asm	/^      d8:	e8 b5 36 00 00       	call   3792 <exit>$/;"	l
d82	user/sh.asm	/^ d82:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
d84	user/usertests.asm	/^     d84:	8d 75 e8             	lea    -0x18(%ebp),%esi$/;"	l
d87	user/sh.asm	/^ d87:	eb 80                	jmp    d09 <printf+0x45>$/;"	l
d87	user/usertests.asm	/^     d87:	85 c0                	test   %eax,%eax$/;"	l
d89	user/sh.asm	/^ d89:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d89	user/usertests.asm	/^     d89:	78 22                	js     dad <sharedfd+0x109>$/;"	l
d8b	user/usertests.asm	/^     d8b:	83 ec 04             	sub    $0x4,%esp$/;"	l
d8c	user/sh.asm	/^ d8c:	6a 01                	push   $0x1$/;"	l
d8e	user/sh.asm	/^ d8e:	b9 0a 00 00 00       	mov    $0xa,%ecx$/;"	l
d8e	user/usertests.asm	/^     d8e:	6a 0a                	push   $0xa$/;"	l
d9	user/cowtest2.asm	/^  d9:	5d                   	pop    %ebp$/;"	l
d9	user/forktest.asm	/^  d9:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
d9	user/stressfs.asm	/^  d9:	83 c4 10             	add    $0x10,%esp$/;"	l
d9	user/zombie.asm	/^  d9:	38 ca                	cmp    %cl,%dl$/;"	l
d90	user/usertests.asm	/^     d90:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
d93	user/sh.asm	/^ d93:	8b 7d d4             	mov    -0x2c(%ebp),%edi$/;"	l
d93	user/usertests.asm	/^     d93:	50                   	push   %eax$/;"	l
d94	user/usertests.asm	/^     d94:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
d96	user/sh.asm	/^ d96:	8b 17                	mov    (%edi),%edx$/;"	l
d97	user/usertests.asm	/^     d97:	e8 0e 2a 00 00       	call   37aa <read>$/;"	l
d98	user/sh.asm	/^ d98:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d9b	user/sh.asm	/^ d9b:	e8 9a fe ff ff       	call   c3a <printint>$/;"	l
d9c	user/usertests.asm	/^     d9c:	83 c4 10             	add    $0x10,%esp$/;"	l
d9f	user/usertests.asm	/^     d9f:	85 c0                	test   %eax,%eax$/;"	l
da	user/cowtest1.asm	/^  da:	75 f5                	jne    d1 <strlen+0x10>$/;"	l
da	user/cowtest2.asm	/^  da:	c3                   	ret    $/;"	l
da	user/echo.asm	/^  da:	55                   	push   %ebp$/;"	l
da	user/grep.asm	/^  da:	83 ec 08             	sub    $0x8,%esp$/;"	l
da	user/init.asm	/^  da:	e8 c0 01 00 00       	call   29f <exit>$/;"	l
da	user/kill.asm	/^  da:	fc                   	cld    $/;"	l
da	user/ls.asm	/^  da:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
da	user/mkdir.asm	/^  da:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
da	user/rm.asm	/^  da:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
da	user/sh.asm	/^  da:	e8 b3 0a 00 00       	call   b92 <exit>$/;"	l
da	user/wc.asm	/^  da:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
da0	user/sh.asm	/^ da0:	89 f8                	mov    %edi,%eax$/;"	l
da1	user/usertests.asm	/^     da1:	7e 3d                	jle    de0 <sharedfd+0x13c>$/;"	l
da2	user/sh.asm	/^ da2:	83 c0 04             	add    $0x4,%eax$/;"	l
da3	user/usertests.asm	/^     da3:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
da5	user/sh.asm	/^ da5:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
da6	user/usertests.asm	/^     da6:	eb 23                	jmp    dcb <sharedfd+0x127>$/;"	l
da8	user/sh.asm	/^ da8:	83 c4 10             	add    $0x10,%esp$/;"	l
da8	user/usertests.asm	/^     da8:	e8 e5 29 00 00       	call   3792 <exit>$/;"	l
dab	user/sh.asm	/^ dab:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
dad	user/usertests.asm	/^     dad:	83 ec 08             	sub    $0x8,%esp$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	user/cowtest2.asm	/^  db:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
db	user/cowtest3.asm	/^  db:	83 c2 01             	add    $0x1,%edx$/;"	l
db	user/echo.asm	/^  db:	89 e5                	mov    %esp,%ebp$/;"	l
db	user/kill.asm	/^  db:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
db	user/ln.asm	/^  db:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
db	user/zombie.asm	/^  db:	75 f2                	jne    cf <strchr+0x17>$/;"	l
db0	user/sh.asm	/^ db0:	e9 54 ff ff ff       	jmp    d09 <printf+0x45>$/;"	l
db0	user/usertests.asm	/^     db0:	68 28 4d 00 00       	push   $0x4d28$/;"	l
db5	user/sh.asm	/^ db5:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db5	user/usertests.asm	/^     db5:	6a 01                	push   $0x1$/;"	l
db7	user/usertests.asm	/^     db7:	e8 08 2b 00 00       	call   38c4 <printf>$/;"	l
db8	user/sh.asm	/^ db8:	6a 00                	push   $0x0$/;"	l
dba	user/sh.asm	/^ dba:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
dbc	user/usertests.asm	/^     dbc:	83 c4 10             	add    $0x10,%esp$/;"	l
dbf	user/sh.asm	/^ dbf:	8b 7d d4             	mov    -0x2c(%ebp),%edi$/;"	l
dbf	user/usertests.asm	/^     dbf:	eb 5b                	jmp    e1c <sharedfd+0x178>$/;"	l
dc	user/cowtest1.asm	/^  dc:	5d                   	pop    %ebp$/;"	l
dc	user/stressfs.asm	/^  dc:	bb 14 00 00 00       	mov    $0x14,%ebx$/;"	l
dc1	user/usertests.asm	/^     dc1:	83 c7 01             	add    $0x1,%edi$/;"	l
dc2	user/sh.asm	/^ dc2:	8b 17                	mov    (%edi),%edx$/;"	l
dc4	user/sh.asm	/^ dc4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dc4	user/usertests.asm	/^     dc4:	83 c0 01             	add    $0x1,%eax$/;"	l
dc7	user/sh.asm	/^ dc7:	e8 6e fe ff ff       	call   c3a <printint>$/;"	l
dc7	user/usertests.asm	/^     dc7:	39 f0                	cmp    %esi,%eax$/;"	l
dc9	user/usertests.asm	/^     dc9:	74 c0                	je     d8b <sharedfd+0xe7>$/;"	l
dcb	user/usertests.asm	/^     dcb:	0f b6 10             	movzbl (%eax),%edx$/;"	l
dcc	user/sh.asm	/^ dcc:	89 f8                	mov    %edi,%eax$/;"	l
dce	user/sh.asm	/^ dce:	83 c0 04             	add    $0x4,%eax$/;"	l
dce	user/usertests.asm	/^     dce:	80 fa 63             	cmp    $0x63,%dl$/;"	l
dd	user/cat.asm	/^  dd:	e8 d9 01 00 00       	call   2bb <exit>$/;"	l
dd	user/cowtest1.asm	/^  dd:	c3                   	ret    $/;"	l
dd	user/echo.asm	/^  dd:	57                   	push   %edi$/;"	l
dd	user/forktest.asm	/^  dd:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
dd	user/grep.asm	/^  dd:	53                   	push   %ebx$/;"	l
dd	user/kill.asm	/^  dd:	89 d0                	mov    %edx,%eax$/;"	l
dd	user/usertests.asm	/^      dd:	55                   	push   %ebp$/;"	l
dd	user/wc.asm	/^  dd:	55                   	push   %ebp$/;"	l
dd	user/zombie.asm	/^  dd:	eb 05                	jmp    e4 <strchr+0x2c>$/;"	l
dd1	user/sh.asm	/^ dd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
dd1	user/usertests.asm	/^     dd1:	74 ee                	je     dc1 <sharedfd+0x11d>$/;"	l
dd3	user/usertests.asm	/^     dd3:	80 fa 70             	cmp    $0x70,%dl$/;"	l
dd4	user/sh.asm	/^ dd4:	83 c4 10             	add    $0x10,%esp$/;"	l
dd6	user/usertests.asm	/^     dd6:	0f 94 c2             	sete   %dl$/;"	l
dd7	user/sh.asm	/^ dd7:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
dd9	user/usertests.asm	/^     dd9:	0f b6 d2             	movzbl %dl,%edx$/;"	l
ddc	user/sh.asm	/^ ddc:	e9 28 ff ff ff       	jmp    d09 <printf+0x45>$/;"	l
ddc	user/usertests.asm	/^     ddc:	01 d3                	add    %edx,%ebx$/;"	l
dde	user/usertests.asm	/^     dde:	eb e4                	jmp    dc4 <sharedfd+0x120>$/;"	l
de	user/cowtest1.asm	/^  de:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
de	user/cowtest3.asm	/^  de:	89 d0                	mov    %edx,%eax$/;"	l
de	user/echo.asm	/^  de:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
de	user/grep.asm	/^  de:	56                   	push   %esi$/;"	l
de	user/ln.asm	/^  de:	fc                   	cld    $/;"	l
de	user/ls.asm	/^  de:	75 37                	jne    117 <ls+0x85>$/;"	l
de	user/mkdir.asm	/^  de:	75 f5                	jne    d5 <strlen+0x10>$/;"	l
de	user/rm.asm	/^  de:	75 f5                	jne    d5 <strlen+0x10>$/;"	l
de	user/usertests.asm	/^      de:	89 e5                	mov    %esp,%ebp$/;"	l
de	user/wc.asm	/^  de:	89 e5                	mov    %esp,%ebp$/;"	l
de0	user/usertests.asm	/^     de0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
de1	user/sh.asm	/^ de1:	8b 4d d4             	mov    -0x2c(%ebp),%ecx$/;"	l
de3	user/usertests.asm	/^     de3:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
de4	user/sh.asm	/^ de4:	8b 01                	mov    (%ecx),%eax$/;"	l
de6	user/sh.asm	/^ de6:	83 c1 04             	add    $0x4,%ecx$/;"	l
de6	user/usertests.asm	/^     de6:	e8 cf 29 00 00       	call   37ba <close>$/;"	l
de9	user/sh.asm	/^ de9:	89 4d d4             	mov    %ecx,-0x2c(%ebp)$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deb	user/usertests.asm	/^     deb:	c7 04 24 17 40 00 00 	movl   $0x4017,(%esp)$/;"	l
dec	user/sh.asm	/^ dec:	85 c0                	test   %eax,%eax$/;"	l
dec_ref	kalloc.c	/^dec_ref(uint pa)$/;"	f
dee	user/sh.asm	/^ dee:	74 13                	je     e03 <printf+0x13f>$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	user/grep.asm	/^  df:	e8 64 ff ff ff       	call   48 <matchhere>$/;"	l
df	user/init.asm	/^  df:	55                   	push   %ebp$/;"	l
df	user/kill.asm	/^  df:	5f                   	pop    %edi$/;"	l
df	user/ln.asm	/^  df:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
df	user/sh.asm	/^  df:	83 ec 0c             	sub    $0xc,%esp$/;"	l
df	user/zombie.asm	/^  df:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df0	user/sh.asm	/^ df0:	89 c3                	mov    %eax,%ebx$/;"	l
df2	user/sh.asm	/^ df2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
df2	user/usertests.asm	/^     df2:	e8 eb 29 00 00       	call   37e2 <unlink>$/;"	l
df5	user/sh.asm	/^ df5:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
df7	user/usertests.asm	/^     df7:	83 c4 10             	add    $0x10,%esp$/;"	l
dfa	user/sh.asm	/^ dfa:	84 c0                	test   %al,%al$/;"	l
dfa	user/usertests.asm	/^     dfa:	81 ff 10 27 00 00    	cmp    $0x2710,%edi$/;"	l
dfc	user/sh.asm	/^ dfc:	75 0f                	jne    e0d <printf+0x149>$/;"	l
dfe	user/sh.asm	/^ dfe:	e9 06 ff ff ff       	jmp    d09 <printf+0x45>$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	user/usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	user/usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	user/cat.asm	/^  dst = vdst;$/;"	d
dst	user/cowtest1.asm	/^  dst = vdst;$/;"	d
dst	user/cowtest2.asm	/^  dst = vdst;$/;"	d
dst	user/cowtest3.asm	/^  dst = vdst;$/;"	d
dst	user/echo.asm	/^  dst = vdst;$/;"	d
dst	user/forktest.asm	/^  dst = vdst;$/;"	d
dst	user/grep.asm	/^  dst = vdst;$/;"	d
dst	user/init.asm	/^  dst = vdst;$/;"	d
dst	user/kill.asm	/^  dst = vdst;$/;"	d
dst	user/ln.asm	/^  dst = vdst;$/;"	d
dst	user/ls.asm	/^  dst = vdst;$/;"	d
dst	user/mkdir.asm	/^  dst = vdst;$/;"	d
dst	user/rm.asm	/^  dst = vdst;$/;"	d
dst	user/sh.asm	/^  dst = vdst;$/;"	d
dst	user/stressfs.asm	/^  dst = vdst;$/;"	d
dst	user/usertests.asm	/^  dst = vdst;$/;"	d
dst	user/wc.asm	/^  dst = vdst;$/;"	d
dst	user/zombie.asm	/^  dst = vdst;$/;"	d
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
e	user/cowtest1.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/cowtest2.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/cowtest3.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/echo.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/init.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/kill.asm	/^   e:	53                   	push   %ebx$/;"	l
e	user/ln.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/mkdir.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/rm.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/sh.asm	/^   e:	68 dc 0f 00 00       	push   $0xfdc$/;"	l
e	user/stressfs.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	user/cowtest2.asm	/^  e0:	eb f7                	jmp    d9 <strlen+0x1b>$/;"	l
e0	user/cowtest3.asm	/^  e0:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
e0	user/forktest.asm	/^  e0:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
e0	user/init.asm	/^  e0:	89 e5                	mov    %esp,%ebp$/;"	l
e0	user/kill.asm	/^  e0:	5d                   	pop    %ebp$/;"	l
e0	user/ls.asm	/^  e0:	8b bd d4 fd ff ff    	mov    -0x22c(%ebp),%edi$/;"	l
e0	user/mkdir.asm	/^  e0:	5d                   	pop    %ebp$/;"	l
e0	user/rm.asm	/^  e0:	5d                   	pop    %ebp$/;"	l
e0	user/usertests.asm	/^      e0:	83 ec 10             	sub    $0x10,%esp$/;"	l
e0	user/wc.asm	/^  e0:	57                   	push   %edi$/;"	l
e00	user/usertests.asm	/^     e00:	75 22                	jne    e24 <sharedfd+0x180>$/;"	l
e02	user/usertests.asm	/^     e02:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx$/;"	l
e03	user/sh.asm	/^ e03:	bb c4 10 00 00       	mov    $0x10c4,%ebx$/;"	l
e08	user/sh.asm	/^ e08:	b8 28 00 00 00       	mov    $0x28,%eax$/;"	l
e08	user/usertests.asm	/^     e08:	75 1a                	jne    e24 <sharedfd+0x180>$/;"	l
e0a	user/usertests.asm	/^     e0a:	83 ec 08             	sub    $0x8,%esp$/;"	l
e0d	user/sh.asm	/^ e0d:	8d 7d e3             	lea    -0x1d(%ebp),%edi$/;"	l
e0d	user/usertests.asm	/^     e0d:	68 20 40 00 00       	push   $0x4020$/;"	l
e1	user/echo.asm	/^  e1:	89 d7                	mov    %edx,%edi$/;"	l
e1	user/kill.asm	/^  e1:	c3                   	ret    $/;"	l
e1	user/ln.asm	/^  e1:	89 d0                	mov    %edx,%eax$/;"	l
e1	user/mkdir.asm	/^  e1:	c3                   	ret    $/;"	l
e1	user/rm.asm	/^  e1:	c3                   	ret    $/;"	l
e1	user/stressfs.asm	/^  e1:	8d bd de fd ff ff    	lea    -0x222(%ebp),%edi$/;"	l
e1	user/wc.asm	/^  e1:	56                   	push   %esi$/;"	l
e10	user/sh.asm	/^ e10:	89 75 d0             	mov    %esi,-0x30(%ebp)$/;"	l
e12	user/usertests.asm	/^     e12:	6a 01                	push   $0x1$/;"	l
e13	user/sh.asm	/^ e13:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
e14	user/usertests.asm	/^     e14:	e8 ab 2a 00 00       	call   38c4 <printf>$/;"	l
e16	user/sh.asm	/^ e16:	88 45 e3             	mov    %al,-0x1d(%ebp)$/;"	l
e19	user/sh.asm	/^ e19:	83 ec 04             	sub    $0x4,%esp$/;"	l
e19	user/usertests.asm	/^     e19:	83 c4 10             	add    $0x10,%esp$/;"	l
e1c	user/sh.asm	/^ e1c:	6a 01                	push   $0x1$/;"	l
e1c	user/usertests.asm	/^     e1c:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
e1e	user/sh.asm	/^ e1e:	57                   	push   %edi$/;"	l
e1f	user/sh.asm	/^ e1f:	56                   	push   %esi$/;"	l
e1f	user/usertests.asm	/^     e1f:	5b                   	pop    %ebx$/;"	l
e2	user/cat.asm	/^  e2:	83 ec 04             	sub    $0x4,%esp$/;"	l
e2	user/cowtest2.asm	/^  e2:	55                   	push   %ebp$/;"	l
e2	user/init.asm	/^  e2:	53                   	push   %ebx$/;"	l
e2	user/kill.asm	/^  e2:	55                   	push   %ebp$/;"	l
e2	user/mkdir.asm	/^  e2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e2	user/rm.asm	/^  e2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e2	user/sh.asm	/^  e2:	ff 73 14             	pushl  0x14(%ebx)$/;"	l
e2	user/wc.asm	/^  e2:	53                   	push   %ebx$/;"	l
e20	user/sh.asm	/^ e20:	e8 8d fd ff ff       	call   bb2 <write>$/;"	l
e20	user/usertests.asm	/^     e20:	5e                   	pop    %esi$/;"	l
e21	user/usertests.asm	/^     e21:	5f                   	pop    %edi$/;"	l
e22	user/usertests.asm	/^     e22:	5d                   	pop    %ebp$/;"	l
e23	user/usertests.asm	/^     e23:	c3                   	ret    $/;"	l
e24	user/usertests.asm	/^     e24:	53                   	push   %ebx$/;"	l
e25	user/sh.asm	/^ e25:	83 c3 01             	add    $0x1,%ebx$/;"	l
e25	user/usertests.asm	/^     e25:	57                   	push   %edi$/;"	l
e26	user/usertests.asm	/^     e26:	68 2d 40 00 00       	push   $0x402d$/;"	l
e28	user/sh.asm	/^ e28:	0f b6 03             	movzbl (%ebx),%eax$/;"	l
e2b	user/sh.asm	/^ e2b:	83 c4 10             	add    $0x10,%esp$/;"	l
e2b	user/usertests.asm	/^     e2b:	6a 01                	push   $0x1$/;"	l
e2d	user/usertests.asm	/^     e2d:	e8 92 2a 00 00       	call   38c4 <printf>$/;"	l
e2e	user/sh.asm	/^ e2e:	84 c0                	test   %al,%al$/;"	l
e3	user/cowtest1.asm	/^  e3:	eb f7                	jmp    dc <strlen+0x1b>$/;"	l
e3	user/cowtest2.asm	/^  e3:	89 e5                	mov    %esp,%ebp$/;"	l
e3	user/echo.asm	/^  e3:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e3	user/forktest.asm	/^  e3:	55                   	push   %ebp$/;"	l
e3	user/init.asm	/^  e3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	user/kill.asm	/^  e3:	89 e5                	mov    %esp,%ebp$/;"	l
e3	user/ln.asm	/^  e3:	5f                   	pop    %edi$/;"	l
e3	user/usertests.asm	/^      e3:	68 37 3c 00 00       	push   $0x3c37$/;"	l
e3	user/wc.asm	/^  e3:	51                   	push   %ecx$/;"	l
e30	user/sh.asm	/^ e30:	75 e4                	jne    e16 <printf+0x152>$/;"	l
e32	user/sh.asm	/^ e32:	8b 75 d0             	mov    -0x30(%ebp),%esi$/;"	l
e32	user/usertests.asm	/^     e32:	e8 5b 29 00 00       	call   3792 <exit>$/;"	l
e35	user/sh.asm	/^ e35:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
e37	user/usertests.asm	/^     e37:	55                   	push   %ebp$/;"	l
e38	user/usertests.asm	/^     e38:	89 e5                	mov    %esp,%ebp$/;"	l
e3a	user/sh.asm	/^ e3a:	e9 ca fe ff ff       	jmp    d09 <printf+0x45>$/;"	l
e3a	user/usertests.asm	/^     e3a:	57                   	push   %edi$/;"	l
e3b	user/usertests.asm	/^     e3b:	56                   	push   %esi$/;"	l
e3c	user/usertests.asm	/^     e3c:	53                   	push   %ebx$/;"	l
e3d	user/usertests.asm	/^     e3d:	83 ec 34             	sub    $0x34,%esp$/;"	l
e3f	user/sh.asm	/^ e3f:	8b 7d d4             	mov    -0x2c(%ebp),%edi$/;"	l
e4	user/cowtest3.asm	/^  e4:	75 f5                	jne    db <strlen+0x10>$/;"	l
e4	user/forktest.asm	/^  e4:	89 e5                	mov    %esp,%ebp$/;"	l
e4	user/grep.asm	/^  e4:	83 c4 10             	add    $0x10,%esp$/;"	l
e4	user/ln.asm	/^  e4:	5d                   	pop    %ebp$/;"	l
e4	user/wc.asm	/^  e4:	83 ec 18             	sub    $0x18,%esp$/;"	l
e4	user/zombie.asm	/^  e4:	5b                   	pop    %ebx$/;"	l
e40	user/usertests.asm	/^     e40:	c7 45 d8 42 40 00 00 	movl   $0x4042,-0x28(%ebp)$/;"	l
e42	user/sh.asm	/^ e42:	8b 07                	mov    (%edi),%eax$/;"	l
e44	user/sh.asm	/^ e44:	88 45 e4             	mov    %al,-0x1c(%ebp)$/;"	l
e47	user/sh.asm	/^ e47:	83 ec 04             	sub    $0x4,%esp$/;"	l
e47	user/usertests.asm	/^     e47:	c7 45 dc 8b 41 00 00 	movl   $0x418b,-0x24(%ebp)$/;"	l
e4a	user/sh.asm	/^ e4a:	6a 01                	push   $0x1$/;"	l
e4c	user/sh.asm	/^ e4c:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
e4e	user/usertests.asm	/^     e4e:	c7 45 e0 8f 41 00 00 	movl   $0x418f,-0x20(%ebp)$/;"	l
e4f	user/sh.asm	/^ e4f:	50                   	push   %eax$/;"	l
e5	user/cat.asm	/^  e5:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
e5	user/cowtest1.asm	/^  e5:	55                   	push   %ebp$/;"	l
e5	user/cowtest2.asm	/^  e5:	57                   	push   %edi$/;"	l
e5	user/kill.asm	/^  e5:	53                   	push   %ebx$/;"	l
e5	user/ln.asm	/^  e5:	c3                   	ret    $/;"	l
e5	user/sh.asm	/^  e5:	e8 d0 0a 00 00       	call   bba <close>$/;"	l
e5	user/zombie.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e50	user/sh.asm	/^ e50:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
e53	user/sh.asm	/^ e53:	e8 5a fd ff ff       	call   bb2 <write>$/;"	l
e55	user/usertests.asm	/^     e55:	c7 45 e4 45 40 00 00 	movl   $0x4045,-0x1c(%ebp)$/;"	l
e58	user/sh.asm	/^ e58:	83 c7 04             	add    $0x4,%edi$/;"	l
e5b	user/sh.asm	/^ e5b:	89 7d d4             	mov    %edi,-0x2c(%ebp)$/;"	l
e5c	user/usertests.asm	/^     e5c:	68 48 40 00 00       	push   $0x4048$/;"	l
e5e	user/sh.asm	/^ e5e:	83 c4 10             	add    $0x10,%esp$/;"	l
e6	user/cowtest1.asm	/^  e6:	89 e5                	mov    %esp,%ebp$/;"	l
e6	user/cowtest2.asm	/^  e6:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e6	user/cowtest3.asm	/^  e6:	5d                   	pop    %ebp$/;"	l
e6	user/echo.asm	/^  e6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e6	user/forktest.asm	/^  e6:	51                   	push   %ecx$/;"	l
e6	user/init.asm	/^  e6:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
e6	user/kill.asm	/^  e6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e6	user/ln.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	user/ls.asm	/^  e6:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax$/;"	l
e6	user/zombie.asm	/^  e6:	c3                   	ret    $/;"	l
e61	user/sh.asm	/^ e61:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
e61	user/usertests.asm	/^     e61:	6a 01                	push   $0x1$/;"	l
e63	user/usertests.asm	/^     e63:	e8 5c 2a 00 00       	call   38c4 <printf>$/;"	l
e66	user/sh.asm	/^ e66:	e9 9e fe ff ff       	jmp    d09 <printf+0x45>$/;"	l
e68	user/usertests.asm	/^     e68:	83 c4 10             	add    $0x10,%esp$/;"	l
e6b	user/sh.asm	/^ e6b:	88 5d e5             	mov    %bl,-0x1b(%ebp)$/;"	l
e6b	user/usertests.asm	/^     e6b:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
e6e	user/sh.asm	/^ e6e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7	user/cowtest3.asm	/^  e7:	c3                   	ret    $/;"	l
e7	user/forktest.asm	/^  e7:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7	user/grep.asm	/^  e7:	85 c0                	test   %eax,%eax$/;"	l
e7	user/ln.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	user/mkdir.asm	/^  e7:	eb f7                	jmp    e0 <strlen+0x1b>$/;"	l
e7	user/rm.asm	/^  e7:	eb f7                	jmp    e0 <strlen+0x1b>$/;"	l
e7	user/stressfs.asm	/^  e7:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7	user/wc.asm	/^  e7:	8b 01                	mov    (%ecx),%eax$/;"	l
e7	user/zombie.asm	/^  e7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e70	user/usertests.asm	/^     e70:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi$/;"	l
e71	user/sh.asm	/^ e71:	6a 01                	push   $0x1$/;"	l
e73	user/sh.asm	/^ e73:	8d 45 e5             	lea    -0x1b(%ebp),%eax$/;"	l
e74	user/usertests.asm	/^     e74:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e76	user/sh.asm	/^ e76:	50                   	push   %eax$/;"	l
e77	user/sh.asm	/^ e77:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
e77	user/usertests.asm	/^     e77:	56                   	push   %esi$/;"	l
e78	user/usertests.asm	/^     e78:	e8 65 29 00 00       	call   37e2 <unlink>$/;"	l
e7a	user/sh.asm	/^ e7a:	e8 33 fd ff ff       	call   bb2 <write>$/;"	l
e7d	user/usertests.asm	/^     e7d:	e8 08 29 00 00       	call   378a <fork>$/;"	l
e7f	user/sh.asm	/^ e7f:	83 c4 10             	add    $0x10,%esp$/;"	l
e8	user/cat.asm	/^  e8:	ff 30                	pushl  (%eax)$/;"	l
e8	user/cowtest1.asm	/^  e8:	57                   	push   %edi$/;"	l
e8	user/cowtest3.asm	/^  e8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8	user/usertests.asm	/^      e8:	ff 35 0c 5c 00 00    	pushl  0x5c0c$/;"	l
e82	user/sh.asm	/^ e82:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
e82	user/usertests.asm	/^     e82:	83 c4 10             	add    $0x10,%esp$/;"	l
e85	user/usertests.asm	/^     e85:	85 c0                	test   %eax,%eax$/;"	l
e87	user/sh.asm	/^ e87:	e9 7d fe ff ff       	jmp    d09 <printf+0x45>$/;"	l
e87	user/usertests.asm	/^     e87:	78 2a                	js     eb3 <fourfiles+0x7c>$/;"	l
e89	user/usertests.asm	/^     e89:	85 c0                	test   %eax,%eax$/;"	l
e8b	user/usertests.asm	/^     e8b:	74 3a                	je     ec7 <fourfiles+0x90>$/;"	l
e8c	user/sh.asm	/^ e8c:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
e8d	user/usertests.asm	/^     e8d:	83 c3 01             	add    $0x1,%ebx$/;"	l
e8f	user/sh.asm	/^ e8f:	5b                   	pop    %ebx$/;"	l
e9	user/cowtest1.asm	/^  e9:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e9	user/cowtest2.asm	/^  e9:	89 d7                	mov    %edx,%edi$/;"	l
e9	user/echo.asm	/^  e9:	fc                   	cld    $/;"	l
e9	user/grep.asm	/^  e9:	75 1d                	jne    108 <match+0x3e>$/;"	l
e9	user/init.asm	/^  e9:	89 c2                	mov    %eax,%edx$/;"	l
e9	user/kill.asm	/^  e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
e9	user/ln.asm	/^  e9:	53                   	push   %ebx$/;"	l
e9	user/mkdir.asm	/^  e9:	55                   	push   %ebp$/;"	l
e9	user/rm.asm	/^  e9:	55                   	push   %ebp$/;"	l
e9	user/wc.asm	/^  e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
e90	user/sh.asm	/^ e90:	5e                   	pop    %esi$/;"	l
e90	user/usertests.asm	/^     e90:	83 fb 04             	cmp    $0x4,%ebx$/;"	l
e91	user/sh.asm	/^ e91:	5f                   	pop    %edi$/;"	l
e92	user/sh.asm	/^ e92:	5d                   	pop    %ebp$/;"	l
e93	user/sh.asm	/^ e93:	c3                   	ret    $/;"	l
e93	user/usertests.asm	/^     e93:	75 db                	jne    e70 <fourfiles+0x39>$/;"	l
e94	user/sh.asm	/^ e94:	55                   	push   %ebp$/;"	l
e95	user/sh.asm	/^ e95:	89 e5                	mov    %esp,%ebp$/;"	l
e95	user/usertests.asm	/^     e95:	e8 00 29 00 00       	call   379a <wait>$/;"	l
e97	user/sh.asm	/^ e97:	57                   	push   %edi$/;"	l
e98	user/sh.asm	/^ e98:	56                   	push   %esi$/;"	l
e99	user/sh.asm	/^ e99:	53                   	push   %ebx$/;"	l
e9a	user/sh.asm	/^ e9a:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
e9a	user/usertests.asm	/^     e9a:	e8 fb 28 00 00       	call   379a <wait>$/;"	l
e9d	user/sh.asm	/^ e9d:	8d 4b f8             	lea    -0x8(%ebx),%ecx$/;"	l
e9f	user/usertests.asm	/^     e9f:	e8 f6 28 00 00       	call   379a <wait>$/;"	l
ea	user/cat.asm	/^  ea:	68 27 07 00 00       	push   $0x727$/;"	l
ea	user/echo.asm	/^  ea:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
ea	user/forktest.asm	/^  ea:	e8 36 ff ff ff       	call   25 <forktest>$/;"	l
ea	user/ln.asm	/^  ea:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea	user/mkdir.asm	/^  ea:	89 e5                	mov    %esp,%ebp$/;"	l
ea	user/rm.asm	/^  ea:	89 e5                	mov    %esp,%ebp$/;"	l
ea	user/sh.asm	/^  ea:	83 c4 08             	add    $0x8,%esp$/;"	l
ea	user/stressfs.asm	/^  ea:	68 00 02 00 00       	push   $0x200$/;"	l
ea0	user/sh.asm	/^ ea0:	a1 84 16 00 00       	mov    0x1684,%eax$/;"	l
ea4	user/usertests.asm	/^     ea4:	e8 f1 28 00 00       	call   379a <wait>$/;"	l
ea5	user/sh.asm	/^ ea5:	eb 0c                	jmp    eb3 <free+0x1f>$/;"	l
ea7	user/sh.asm	/^ ea7:	8b 10                	mov    (%eax),%edx$/;"	l
ea9	user/sh.asm	/^ ea9:	39 c2                	cmp    %eax,%edx$/;"	l
ea9	user/usertests.asm	/^     ea9:	bf 30 00 00 00       	mov    $0x30,%edi$/;"	l
eab	user/sh.asm	/^ eab:	77 04                	ja     eb1 <free+0x1d>$/;"	l
ead	user/sh.asm	/^ ead:	39 ca                	cmp    %ecx,%edx$/;"	l
eae	user/usertests.asm	/^     eae:	e9 15 01 00 00       	jmp    fc8 <fourfiles+0x191>$/;"	l
eaf	user/sh.asm	/^ eaf:	77 10                	ja     ec1 <free+0x2d>$/;"	l
eargv	user/sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	user/cowtest2.asm	/^  eb:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
eb	user/grep.asm	/^  eb:	83 c3 01             	add    $0x1,%ebx$/;"	l
eb	user/init.asm	/^  eb:	83 c1 01             	add    $0x1,%ecx$/;"	l
eb1	user/sh.asm	/^ eb1:	89 d0                	mov    %edx,%eax$/;"	l
eb3	user/sh.asm	/^ eb3:	39 c8                	cmp    %ecx,%eax$/;"	l
eb3	user/usertests.asm	/^     eb3:	83 ec 08             	sub    $0x8,%esp$/;"	l
eb5	user/sh.asm	/^ eb5:	73 f0                	jae    ea7 <free+0x13>$/;"	l
eb6	user/usertests.asm	/^     eb6:	68 1d 4b 00 00       	push   $0x4b1d$/;"	l
eb7	user/sh.asm	/^ eb7:	8b 10                	mov    (%eax),%edx$/;"	l
eb9	user/sh.asm	/^ eb9:	39 ca                	cmp    %ecx,%edx$/;"	l
ebb	user/sh.asm	/^ ebb:	77 04                	ja     ec1 <free+0x2d>$/;"	l
ebb	user/usertests.asm	/^     ebb:	6a 01                	push   $0x1$/;"	l
ebd	user/sh.asm	/^ ebd:	39 c2                	cmp    %eax,%edx$/;"	l
ebd	user/usertests.asm	/^     ebd:	e8 02 2a 00 00       	call   38c4 <printf>$/;"	l
ebf	user/sh.asm	/^ ebf:	77 f0                	ja     eb1 <free+0x1d>$/;"	l
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	user/cowtest1.asm	/^  ec:	89 d7                	mov    %edx,%edi$/;"	l
ec	user/echo.asm	/^  ec:	89 d0                	mov    %edx,%eax$/;"	l
ec	user/kill.asm	/^  ec:	0f b6 10             	movzbl (%eax),%edx$/;"	l
ec	user/ls.asm	/^  ec:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)$/;"	l
ec	user/mkdir.asm	/^  ec:	57                   	push   %edi$/;"	l
ec	user/rm.asm	/^  ec:	57                   	push   %edi$/;"	l
ec	user/wc.asm	/^  ec:	8b 59 04             	mov    0x4(%ecx),%ebx$/;"	l
ec	user/zombie.asm	/^  ec:	eb f6                	jmp    e4 <strchr+0x2c>$/;"	l
ec1	user/sh.asm	/^ ec1:	8b 73 fc             	mov    -0x4(%ebx),%esi$/;"	l
ec2	user/usertests.asm	/^     ec2:	e8 cb 28 00 00       	call   3792 <exit>$/;"	l
ec4	user/sh.asm	/^ ec4:	8b 10                	mov    (%eax),%edx$/;"	l
ec6	user/sh.asm	/^ ec6:	8d 3c f1             	lea    (%ecx,%esi,8),%edi$/;"	l
ec7	user/usertests.asm	/^     ec7:	83 ec 08             	sub    $0x8,%esp$/;"	l
ec9	user/sh.asm	/^ ec9:	39 fa                	cmp    %edi,%edx$/;"	l
eca	user/usertests.asm	/^     eca:	68 02 02 00 00       	push   $0x202$/;"	l
ecb	user/sh.asm	/^ ecb:	74 19                	je     ee6 <free+0x52>$/;"	l
ecd	user/sh.asm	/^ ecd:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
ecf	user/usertests.asm	/^     ecf:	56                   	push   %esi$/;"	l
echoargv	user/usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	user/cowtest3.asm	/^  ed:	eb f7                	jmp    e6 <strlen+0x1b>$/;"	l
ed	user/ln.asm	/^  ed:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
ed	user/mkdir.asm	/^  ed:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ed	user/rm.asm	/^  ed:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
ed	user/sh.asm	/^  ed:	ff 73 10             	pushl  0x10(%ebx)$/;"	l
ed0	user/sh.asm	/^ ed0:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
ed0	user/usertests.asm	/^     ed0:	e8 fd 28 00 00       	call   37d2 <open>$/;"	l
ed3	user/sh.asm	/^ ed3:	8d 34 d0             	lea    (%eax,%edx,8),%esi$/;"	l
ed5	user/usertests.asm	/^     ed5:	89 c6                	mov    %eax,%esi$/;"	l
ed6	user/sh.asm	/^ ed6:	39 f1                	cmp    %esi,%ecx$/;"	l
ed7	user/usertests.asm	/^     ed7:	83 c4 10             	add    $0x10,%esp$/;"	l
ed8	user/sh.asm	/^ ed8:	74 1b                	je     ef5 <free+0x61>$/;"	l
eda	user/sh.asm	/^ eda:	89 08                	mov    %ecx,(%eax)$/;"	l
eda	user/usertests.asm	/^     eda:	85 c0                	test   %eax,%eax$/;"	l
edc	user/sh.asm	/^ edc:	a3 84 16 00 00       	mov    %eax,0x1684$/;"	l
edc	user/usertests.asm	/^     edc:	78 45                	js     f23 <fourfiles+0xec>$/;"	l
ede	user/usertests.asm	/^     ede:	83 ec 04             	sub    $0x4,%esp$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	user/cowtest1.asm	/^  ee:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
ee	user/cowtest2.asm	/^  ee:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ee	user/echo.asm	/^  ee:	5f                   	pop    %edi$/;"	l
ee	user/grep.asm	/^  ee:	80 7b ff 00          	cmpb   $0x0,-0x1(%ebx)$/;"	l
ee	user/init.asm	/^  ee:	83 c2 01             	add    $0x1,%edx$/;"	l
ee	user/usertests.asm	/^      ee:	e8 d1 37 00 00       	call   38c4 <printf>$/;"	l
ee	user/zombie.asm	/^  ee:	55                   	push   %ebp$/;"	l
ee1	user/sh.asm	/^ ee1:	5b                   	pop    %ebx$/;"	l
ee1	user/usertests.asm	/^     ee1:	68 00 02 00 00       	push   $0x200$/;"	l
ee2	user/sh.asm	/^ ee2:	5e                   	pop    %esi$/;"	l
ee3	user/sh.asm	/^ ee3:	5f                   	pop    %edi$/;"	l
ee4	user/sh.asm	/^ ee4:	5d                   	pop    %ebp$/;"	l
ee5	user/sh.asm	/^ ee5:	c3                   	ret    $/;"	l
ee6	user/sh.asm	/^ ee6:	03 72 04             	add    0x4(%edx),%esi$/;"	l
ee6	user/usertests.asm	/^     ee6:	83 c3 30             	add    $0x30,%ebx$/;"	l
ee9	user/sh.asm	/^ ee9:	89 73 fc             	mov    %esi,-0x4(%ebx)$/;"	l
ee9	user/usertests.asm	/^     ee9:	53                   	push   %ebx$/;"	l
eea	user/usertests.asm	/^     eea:	68 00 84 00 00       	push   $0x8400$/;"	l
eec	user/sh.asm	/^ eec:	8b 10                	mov    (%eax),%edx$/;"	l
eee	user/sh.asm	/^ eee:	8b 12                	mov    (%edx),%edx$/;"	l
eef	user/usertests.asm	/^     eef:	e8 51 27 00 00       	call   3645 <memset>$/;"	l
ef	user/cat.asm	/^  ef:	6a 01                	push   $0x1$/;"	l
ef	user/cowtest3.asm	/^  ef:	55                   	push   %ebp$/;"	l
ef	user/echo.asm	/^  ef:	5d                   	pop    %ebp$/;"	l
ef	user/forktest.asm	/^  ef:	e8 c0 01 00 00       	call   2b4 <exit>$/;"	l
ef	user/kill.asm	/^  ef:	84 d2                	test   %dl,%dl$/;"	l
ef	user/stressfs.asm	/^  ef:	57                   	push   %edi$/;"	l
ef	user/wc.asm	/^  ef:	83 c3 04             	add    $0x4,%ebx$/;"	l
ef	user/zombie.asm	/^  ef:	89 e5                	mov    %esp,%ebp$/;"	l
ef0	user/sh.asm	/^ ef0:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
ef3	user/sh.asm	/^ ef3:	eb db                	jmp    ed0 <free+0x3c>$/;"	l
ef4	user/usertests.asm	/^     ef4:	83 c4 10             	add    $0x10,%esp$/;"	l
ef5	user/sh.asm	/^ ef5:	03 53 fc             	add    -0x4(%ebx),%edx$/;"	l
ef7	user/usertests.asm	/^     ef7:	bb 0c 00 00 00       	mov    $0xc,%ebx$/;"	l
ef8	user/sh.asm	/^ ef8:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
efb	user/sh.asm	/^ efb:	8b 53 f8             	mov    -0x8(%ebx),%edx$/;"	l
efc	user/usertests.asm	/^     efc:	83 ec 04             	sub    $0x4,%esp$/;"	l
efe	user/sh.asm	/^ efe:	89 10                	mov    %edx,(%eax)$/;"	l
eff	user/usertests.asm	/^     eff:	68 f4 01 00 00       	push   $0x1f4$/;"	l
efile	user/sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
end_op	log.c	/^end_op(void)$/;"	f
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	user/sh.c	/^execcmd(void)$/;"	f
execcmd	user/sh.c	/^struct execcmd {$/;"	s	file:
exectest	user/usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	user/usertests.c	/^exitiputtest(void)$/;"	f
exitwait	user/usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	user/cowtest1.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	user/cowtest2.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	user/cowtest3.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	user/echo.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/grep.asm	/^   f:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
f	user/init.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	user/kill.asm	/^   f:	51                   	push   %ecx$/;"	l
f	user/ln.asm	/^   f:	8b 59 04             	mov    0x4(%ecx),%ebx$/;"	l
f	user/mkdir.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/rm.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/stressfs.asm	/^   f:	53                   	push   %ebx$/;"	l
f0	user/cowtest3.asm	/^  f0:	89 e5                	mov    %esp,%ebp$/;"	l
f0	user/echo.asm	/^  f0:	c3                   	ret    $/;"	l
f0	user/ln.asm	/^  f0:	0f b6 10             	movzbl (%eax),%edx$/;"	l
f0	user/mkdir.asm	/^  f0:	89 d7                	mov    %edx,%edi$/;"	l
f0	user/rm.asm	/^  f0:	89 d7                	mov    %edx,%edi$/;"	l
f0	user/sh.asm	/^  f0:	ff 73 08             	pushl  0x8(%ebx)$/;"	l
f0	user/stressfs.asm	/^  f0:	56                   	push   %esi$/;"	l
f00	user/sh.asm	/^ f00:	eb da                	jmp    edc <free+0x48>$/;"	l
f02	user/sh.asm	/^ f02:	55                   	push   %ebp$/;"	l
f03	user/sh.asm	/^ f03:	89 e5                	mov    %esp,%ebp$/;"	l
f04	user/usertests.asm	/^     f04:	68 00 84 00 00       	push   $0x8400$/;"	l
f05	user/sh.asm	/^ f05:	57                   	push   %edi$/;"	l
f06	user/sh.asm	/^ f06:	56                   	push   %esi$/;"	l
f07	user/sh.asm	/^ f07:	53                   	push   %ebx$/;"	l
f08	user/sh.asm	/^ f08:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f09	user/usertests.asm	/^     f09:	56                   	push   %esi$/;"	l
f0a	user/usertests.asm	/^     f0a:	e8 a3 28 00 00       	call   37b2 <write>$/;"	l
f0b	user/sh.asm	/^ f0b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f0e	user/sh.asm	/^ f0e:	8d 58 07             	lea    0x7(%eax),%ebx$/;"	l
f0f	user/usertests.asm	/^     f0f:	83 c4 10             	add    $0x10,%esp$/;"	l
f1	user/cat.asm	/^  f1:	e8 f7 02 00 00       	call   3ed <printf>$/;"	l
f1	user/cowtest1.asm	/^  f1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f1	user/cowtest2.asm	/^  f1:	fc                   	cld    $/;"	l
f1	user/echo.asm	/^  f1:	55                   	push   %ebp$/;"	l
f1	user/init.asm	/^  f1:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx$/;"	l
f1	user/kill.asm	/^  f1:	74 1e                	je     111 <strchr+0x2f>$/;"	l
f1	user/stressfs.asm	/^  f1:	e8 f3 01 00 00       	call   2e9 <read>$/;"	l
f1	user/zombie.asm	/^  f1:	57                   	push   %edi$/;"	l
f11	user/sh.asm	/^ f11:	c1 eb 03             	shr    $0x3,%ebx$/;"	l
f12	user/usertests.asm	/^     f12:	3d f4 01 00 00       	cmp    $0x1f4,%eax$/;"	l
f14	user/sh.asm	/^ f14:	83 c3 01             	add    $0x1,%ebx$/;"	l
f17	user/sh.asm	/^ f17:	8b 15 84 16 00 00    	mov    0x1684,%edx$/;"	l
f17	user/usertests.asm	/^     f17:	75 1e                	jne    f37 <fourfiles+0x100>$/;"	l
f19	user/usertests.asm	/^     f19:	83 eb 01             	sub    $0x1,%ebx$/;"	l
f1c	user/usertests.asm	/^     f1c:	75 de                	jne    efc <fourfiles+0xc5>$/;"	l
f1d	user/sh.asm	/^ f1d:	85 d2                	test   %edx,%edx$/;"	l
f1e	user/usertests.asm	/^     f1e:	e8 6f 28 00 00       	call   3792 <exit>$/;"	l
f1f	user/sh.asm	/^ f1f:	74 20                	je     f41 <malloc+0x3f>$/;"	l
f2	user/cowtest2.asm	/^  f2:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f2	user/cowtest3.asm	/^  f2:	57                   	push   %edi$/;"	l
f2	user/echo.asm	/^  f2:	89 e5                	mov    %esp,%ebp$/;"	l
f2	user/grep.asm	/^  f2:	75 e6                	jne    da <match+0x10>$/;"	l
f2	user/ls.asm	/^  f2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f2	user/mkdir.asm	/^  f2:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f2	user/rm.asm	/^  f2:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f2	user/wc.asm	/^  f2:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
f2	user/zombie.asm	/^  f2:	56                   	push   %esi$/;"	l
f21	user/sh.asm	/^ f21:	8b 02                	mov    (%edx),%eax$/;"	l
f23	user/sh.asm	/^ f23:	8b 48 04             	mov    0x4(%eax),%ecx$/;"	l
f23	user/usertests.asm	/^     f23:	83 ec 08             	sub    $0x8,%esp$/;"	l
f26	user/sh.asm	/^ f26:	39 cb                	cmp    %ecx,%ebx$/;"	l
f26	user/usertests.asm	/^     f26:	68 e3 42 00 00       	push   $0x42e3$/;"	l
f28	user/sh.asm	/^ f28:	76 3c                	jbe    f66 <malloc+0x64>$/;"	l
f2a	user/sh.asm	/^ f2a:	81 fb 00 10 00 00    	cmp    $0x1000,%ebx$/;"	l
f2b	user/usertests.asm	/^     f2b:	6a 01                	push   $0x1$/;"	l
f2d	user/usertests.asm	/^     f2d:	e8 92 29 00 00       	call   38c4 <printf>$/;"	l
f3	user/cowtest3.asm	/^  f3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f3	user/kill.asm	/^  f3:	89 d9                	mov    %ebx,%ecx$/;"	l
f3	user/ln.asm	/^  f3:	84 d2                	test   %dl,%dl$/;"	l
f3	user/sh.asm	/^  f3:	e8 da 0a 00 00       	call   bd2 <open>$/;"	l
f3	user/usertests.asm	/^      f3:	e8 92 36 00 00       	call   378a <fork>$/;"	l
f3	user/zombie.asm	/^  f3:	53                   	push   %ebx$/;"	l
f30	user/sh.asm	/^ f30:	be 00 10 00 00       	mov    $0x1000,%esi$/;"	l
f32	user/usertests.asm	/^     f32:	e8 5b 28 00 00       	call   3792 <exit>$/;"	l
f35	user/sh.asm	/^ f35:	0f 43 f3             	cmovae %ebx,%esi$/;"	l
f37	user/usertests.asm	/^     f37:	83 ec 04             	sub    $0x4,%esp$/;"	l
f38	user/sh.asm	/^ f38:	8d 3c f5 00 00 00 00 	lea    0x0(,%esi,8),%edi$/;"	l
f3a	user/usertests.asm	/^     f3a:	50                   	push   %eax$/;"	l
f3b	user/usertests.asm	/^     f3b:	68 58 40 00 00       	push   $0x4058$/;"	l
f3f	user/sh.asm	/^ f3f:	eb 70                	jmp    fb1 <malloc+0xaf>$/;"	l
f4	user/cowtest1.asm	/^  f4:	fc                   	cld    $/;"	l
f4	user/cowtest2.asm	/^  f4:	89 d0                	mov    %edx,%eax$/;"	l
f4	user/echo.asm	/^  f4:	53                   	push   %ebx$/;"	l
f4	user/forktest.asm	/^  f4:	55                   	push   %ebp$/;"	l
f4	user/grep.asm	/^  f4:	eb 17                	jmp    10d <match+0x43>$/;"	l
f4	user/zombie.asm	/^  f4:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
f40	user/usertests.asm	/^     f40:	6a 01                	push   $0x1$/;"	l
f41	user/sh.asm	/^ f41:	c7 05 84 16 00 00 88 	movl   $0x1688,0x1684$/;"	l
f42	user/usertests.asm	/^     f42:	e8 7d 29 00 00       	call   38c4 <printf>$/;"	l
f47	user/usertests.asm	/^     f47:	e8 46 28 00 00       	call   3792 <exit>$/;"	l
f48	user/sh.asm	/^ f48:	16 00 00 $/;"	l
f4b	user/sh.asm	/^ f4b:	c7 05 88 16 00 00 88 	movl   $0x1688,0x1688$/;"	l
f4c	user/usertests.asm	/^     f4c:	01 d3                	add    %edx,%ebx$/;"	l
f4e	user/usertests.asm	/^     f4e:	83 ec 04             	sub    $0x4,%esp$/;"	l
f5	user/cowtest1.asm	/^  f5:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f5	user/echo.asm	/^  f5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f5	user/forktest.asm	/^  f5:	89 e5                	mov    %esp,%ebp$/;"	l
f5	user/init.asm	/^  f5:	88 5a ff             	mov    %bl,-0x1(%edx)$/;"	l
f5	user/kill.asm	/^  f5:	38 d3                	cmp    %dl,%bl$/;"	l
f5	user/ln.asm	/^  f5:	74 1e                	je     115 <strchr+0x2f>$/;"	l
f5	user/ls.asm	/^  f5:	53                   	push   %ebx$/;"	l
f5	user/mkdir.asm	/^  f5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f5	user/rm.asm	/^  f5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f51	user/usertests.asm	/^     f51:	68 00 20 00 00       	push   $0x2000$/;"	l
f52	user/sh.asm	/^ f52:	16 00 00 $/;"	l
f55	user/sh.asm	/^ f55:	c7 05 8c 16 00 00 00 	movl   $0x0,0x168c$/;"	l
f56	user/usertests.asm	/^     f56:	68 00 84 00 00       	push   $0x8400$/;"	l
f5b	user/usertests.asm	/^     f5b:	56                   	push   %esi$/;"	l
f5c	user/sh.asm	/^ f5c:	00 00 00 $/;"	l
f5c	user/usertests.asm	/^     f5c:	e8 49 28 00 00       	call   37aa <read>$/;"	l
f5f	user/sh.asm	/^ f5f:	ba 88 16 00 00       	mov    $0x1688,%edx$/;"	l
f6	user/cat.asm	/^  f6:	e8 c0 01 00 00       	call   2bb <exit>$/;"	l
f6	user/cowtest2.asm	/^  f6:	5f                   	pop    %edi$/;"	l
f6	user/cowtest3.asm	/^  f6:	89 d7                	mov    %edx,%edi$/;"	l
f6	user/grep.asm	/^  f6:	83 ec 08             	sub    $0x8,%esp$/;"	l
f6	user/ls.asm	/^  f6:	e8 05 ff ff ff       	call   0 <fmtname>$/;"	l
f6	user/stressfs.asm	/^  f6:	83 c4 10             	add    $0x10,%esp$/;"	l
f61	user/usertests.asm	/^     f61:	83 c4 10             	add    $0x10,%esp$/;"	l
f64	user/sh.asm	/^ f64:	eb bb                	jmp    f21 <malloc+0x1f>$/;"	l
f64	user/usertests.asm	/^     f64:	85 c0                	test   %eax,%eax$/;"	l
f66	user/sh.asm	/^ f66:	39 cb                	cmp    %ecx,%ebx$/;"	l
f66	user/usertests.asm	/^     f66:	7e 36                	jle    f9e <fourfiles+0x167>$/;"	l
f68	user/sh.asm	/^ f68:	74 1c                	je     f86 <malloc+0x84>$/;"	l
f68	user/usertests.asm	/^     f68:	0f b6 0d 00 84 00 00 	movzbl 0x8400,%ecx$/;"	l
f6a	user/sh.asm	/^ f6a:	29 d9                	sub    %ebx,%ecx$/;"	l
f6c	user/sh.asm	/^ f6c:	89 48 04             	mov    %ecx,0x4(%eax)$/;"	l
f6f	user/sh.asm	/^ f6f:	8d 04 c8             	lea    (%eax,%ecx,8),%eax$/;"	l
f6f	user/usertests.asm	/^     f6f:	0f be d1             	movsbl %cl,%edx$/;"	l
f7	user/cowtest1.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	user/cowtest2.asm	/^  f7:	5d                   	pop    %ebp$/;"	l
f7	user/forktest.asm	/^  f7:	53                   	push   %ebx$/;"	l
f7	user/kill.asm	/^  f7:	74 15                	je     10e <strchr+0x2c>$/;"	l
f7	user/ln.asm	/^  f7:	89 d9                	mov    %ebx,%ecx$/;"	l
f7	user/wc.asm	/^  f7:	83 f8 01             	cmp    $0x1,%eax$/;"	l
f7	user/zombie.asm	/^  f7:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
f72	user/sh.asm	/^ f72:	89 58 04             	mov    %ebx,0x4(%eax)$/;"	l
f72	user/usertests.asm	/^     f72:	39 fa                	cmp    %edi,%edx$/;"	l
f74	user/usertests.asm	/^     f74:	75 14                	jne    f8a <fourfiles+0x153>$/;"	l
f75	user/sh.asm	/^ f75:	89 15 84 16 00 00    	mov    %edx,0x1684$/;"	l
f76	user/usertests.asm	/^     f76:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
f7b	user/sh.asm	/^ f7b:	83 c0 08             	add    $0x8,%eax$/;"	l
f7b	user/usertests.asm	/^     f7b:	83 c2 01             	add    $0x1,%edx$/;"	l
f7e	user/sh.asm	/^ f7e:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
f7e	user/usertests.asm	/^     f7e:	39 d0                	cmp    %edx,%eax$/;"	l
f8	user/cowtest2.asm	/^  f8:	c3                   	ret    $/;"	l
f8	user/cowtest3.asm	/^  f8:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f8	user/echo.asm	/^  f8:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f8	user/forktest.asm	/^  f8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f8	user/init.asm	/^  f8:	84 db                	test   %bl,%bl$/;"	l
f8	user/mkdir.asm	/^  f8:	fc                   	cld    $/;"	l
f8	user/rm.asm	/^  f8:	fc                   	cld    $/;"	l
f8	user/sh.asm	/^  f8:	83 c4 10             	add    $0x10,%esp$/;"	l
f8	user/usertests.asm	/^      f8:	83 c4 10             	add    $0x10,%esp$/;"	l
f80	user/usertests.asm	/^     f80:	74 ca                	je     f4c <fourfiles+0x115>$/;"	l
f81	user/sh.asm	/^ f81:	5b                   	pop    %ebx$/;"	l
f82	user/sh.asm	/^ f82:	5e                   	pop    %esi$/;"	l
f82	user/usertests.asm	/^     f82:	38 8a 00 84 00 00    	cmp    %cl,0x8400(%edx)$/;"	l
f83	user/sh.asm	/^ f83:	5f                   	pop    %edi$/;"	l
f84	user/sh.asm	/^ f84:	5d                   	pop    %ebp$/;"	l
f85	user/sh.asm	/^ f85:	c3                   	ret    $/;"	l
f86	user/sh.asm	/^ f86:	8b 08                	mov    (%eax),%ecx$/;"	l
f88	user/sh.asm	/^ f88:	89 0a                	mov    %ecx,(%edx)$/;"	l
f88	user/usertests.asm	/^     f88:	74 f1                	je     f7b <fourfiles+0x144>$/;"	l
f8a	user/sh.asm	/^ f8a:	eb e9                	jmp    f75 <malloc+0x73>$/;"	l
f8a	user/usertests.asm	/^     f8a:	83 ec 08             	sub    $0x8,%esp$/;"	l
f8c	user/sh.asm	/^ f8c:	89 70 04             	mov    %esi,0x4(%eax)$/;"	l
f8d	user/usertests.asm	/^     f8d:	68 69 40 00 00       	push   $0x4069$/;"	l
f8f	user/sh.asm	/^ f8f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f9	user/cowtest1.asm	/^  f9:	5f                   	pop    %edi$/;"	l
f9	user/cowtest2.asm	/^  f9:	55                   	push   %ebp$/;"	l
f9	user/grep.asm	/^  f9:	53                   	push   %ebx$/;"	l
f9	user/kill.asm	/^  f9:	83 c0 01             	add    $0x1,%eax$/;"	l
f9	user/ln.asm	/^  f9:	38 d3                	cmp    %dl,%bl$/;"	l
f9	user/mkdir.asm	/^  f9:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f9	user/rm.asm	/^  f9:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f9	user/stressfs.asm	/^  f9:	83 eb 01             	sub    $0x1,%ebx$/;"	l
f92	user/sh.asm	/^ f92:	83 c0 08             	add    $0x8,%eax$/;"	l
f92	user/usertests.asm	/^     f92:	6a 01                	push   $0x1$/;"	l
f94	user/usertests.asm	/^     f94:	e8 2b 29 00 00       	call   38c4 <printf>$/;"	l
f95	user/sh.asm	/^ f95:	50                   	push   %eax$/;"	l
f96	user/sh.asm	/^ f96:	e8 f9 fe ff ff       	call   e94 <free>$/;"	l
f99	user/usertests.asm	/^     f99:	e8 f4 27 00 00       	call   3792 <exit>$/;"	l
f9b	user/sh.asm	/^ f9b:	8b 15 84 16 00 00    	mov    0x1684,%edx$/;"	l
f9e	user/usertests.asm	/^     f9e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fa	user/cowtest1.asm	/^  fa:	5d                   	pop    %ebp$/;"	l
fa	user/cowtest2.asm	/^  fa:	89 e5                	mov    %esp,%ebp$/;"	l
fa	user/grep.asm	/^  fa:	83 c6 01             	add    $0x1,%esi$/;"	l
fa	user/init.asm	/^  fa:	75 ef                	jne    eb <strcpy+0xc>$/;"	l
fa	user/wc.asm	/^  fa:	7e 3e                	jle    13a <main+0x67>$/;"	l
fa1	user/sh.asm	/^ fa1:	83 c4 10             	add    $0x10,%esp$/;"	l
fa1	user/usertests.asm	/^     fa1:	56                   	push   %esi$/;"	l
fa2	user/usertests.asm	/^     fa2:	e8 13 28 00 00       	call   37ba <close>$/;"	l
fa4	user/sh.asm	/^ fa4:	85 d2                	test   %edx,%edx$/;"	l
fa6	user/sh.asm	/^ fa6:	74 2b                	je     fd3 <malloc+0xd1>$/;"	l
fa7	user/usertests.asm	/^     fa7:	83 c4 10             	add    $0x10,%esp$/;"	l
fa8	user/sh.asm	/^ fa8:	8b 02                	mov    (%edx),%eax$/;"	l
faa	user/sh.asm	/^ faa:	8b 48 04             	mov    0x4(%eax),%ecx$/;"	l
faa	user/usertests.asm	/^     faa:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx$/;"	l
fad	user/sh.asm	/^ fad:	39 d9                	cmp    %ebx,%ecx$/;"	l
faf	user/sh.asm	/^ faf:	73 b5                	jae    f66 <malloc+0x64>$/;"	l
fb	user/cat.asm	/^  fb:	55                   	push   %ebp$/;"	l
fb	user/cowtest1.asm	/^  fb:	c3                   	ret    $/;"	l
fb	user/cowtest3.asm	/^  fb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fb	user/echo.asm	/^  fb:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fb	user/forktest.asm	/^  fb:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
fb	user/ln.asm	/^  fb:	74 15                	je     112 <strchr+0x2c>$/;"	l
fb	user/ls.asm	/^  fb:	83 c4 08             	add    $0x8,%esp$/;"	l
fb	user/mkdir.asm	/^  fb:	89 d0                	mov    %edx,%eax$/;"	l
fb	user/rm.asm	/^  fb:	89 d0                	mov    %edx,%eax$/;"	l
fb	user/sh.asm	/^  fb:	85 c0                	test   %eax,%eax$/;"	l
fb	user/usertests.asm	/^      fb:	85 c0                	test   %eax,%eax$/;"	l
fb0	user/usertests.asm	/^     fb0:	75 3a                	jne    fec <fourfiles+0x1b5>$/;"	l
fb1	user/sh.asm	/^ fb1:	89 c2                	mov    %eax,%edx$/;"	l
fb2	user/usertests.asm	/^     fb2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fb3	user/sh.asm	/^ fb3:	39 05 84 16 00 00    	cmp    %eax,0x1684$/;"	l
fb5	user/usertests.asm	/^     fb5:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
fb8	user/usertests.asm	/^     fb8:	e8 25 28 00 00       	call   37e2 <unlink>$/;"	l
fb9	user/sh.asm	/^ fb9:	75 ed                	jne    fa8 <malloc+0xa6>$/;"	l
fbb	user/sh.asm	/^ fbb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fbd	user/usertests.asm	/^     fbd:	83 c7 01             	add    $0x1,%edi$/;"	l
fbe	user/sh.asm	/^ fbe:	57                   	push   %edi$/;"	l
fbf	user/sh.asm	/^ fbf:	e8 56 fc ff ff       	call   c1a <sbrk>$/;"	l
fc	user/cat.asm	/^  fc:	89 e5                	mov    %esp,%ebp$/;"	l
fc	user/cowtest1.asm	/^  fc:	55                   	push   %ebp$/;"	l
fc	user/cowtest2.asm	/^  fc:	53                   	push   %ebx$/;"	l
fc	user/init.asm	/^  fc:	5b                   	pop    %ebx$/;"	l
fc	user/kill.asm	/^  fc:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fc	user/stressfs.asm	/^  fc:	75 e9                	jne    e7 <main+0xe7>$/;"	l
fc	user/wc.asm	/^  fc:	89 5d e0             	mov    %ebx,-0x20(%ebp)$/;"	l
fc	user/zombie.asm	/^  fc:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
fc0	user/usertests.asm	/^     fc0:	83 c4 10             	add    $0x10,%esp$/;"	l
fc3	user/usertests.asm	/^     fc3:	83 ff 32             	cmp    $0x32,%edi$/;"	l
fc4	user/sh.asm	/^ fc4:	83 c4 10             	add    $0x10,%esp$/;"	l
fc6	user/usertests.asm	/^     fc6:	74 39                	je     1001 <fourfiles+0x1ca>$/;"	l
fc7	user/sh.asm	/^ fc7:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
fc8	user/usertests.asm	/^     fc8:	8b 84 bd 18 ff ff ff 	mov    -0xe8(%ebp,%edi,4),%eax$/;"	l
fca	user/sh.asm	/^ fca:	75 c0                	jne    f8c <malloc+0x8a>$/;"	l
fcc	user/sh.asm	/^ fcc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fcf	user/usertests.asm	/^     fcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
fd	user/cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/cowtest1.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/cowtest1.asm	/^  fd:	89 e5                	mov    %esp,%ebp$/;"	l
fd	user/cowtest2.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/cowtest2.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd	user/cowtest3.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/grep.asm	/^  fd:	56                   	push   %esi$/;"	l
fd	user/init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/init.asm	/^  fd:	5d                   	pop    %ebp$/;"	l
fd	user/kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/ln.asm	/^  fd:	83 c0 01             	add    $0x1,%eax$/;"	l
fd	user/ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/mkdir.asm	/^  fd:	5f                   	pop    %edi$/;"	l
fd	user/rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/rm.asm	/^  fd:	5f                   	pop    %edi$/;"	l
fd	user/sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/sh.asm	/^  fd:	79 17                	jns    116 <runcmd+0x98>$/;"	l
fd	user/sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	user/stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/usertests.asm	/^      fd:	78 49                	js     148 <exitiputtest+0x6b>$/;"	l
fd	user/usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd1	user/sh.asm	/^ fd1:	eb ab                	jmp    f7e <malloc+0x7c>$/;"	l
fd2	user/usertests.asm	/^     fd2:	83 ec 08             	sub    $0x8,%esp$/;"	l
fd3	user/sh.asm	/^ fd3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd5	user/usertests.asm	/^     fd5:	6a 00                	push   $0x0$/;"	l
fd7	user/usertests.asm	/^     fd7:	50                   	push   %eax$/;"	l
fd8	user/sh.asm	/^ fd8:	eb a4                	jmp    f7e <malloc+0x7c>$/;"	l
fd8	user/usertests.asm	/^     fd8:	e8 f5 27 00 00       	call   37d2 <open>$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdd	user/usertests.asm	/^     fdd:	89 c6                	mov    %eax,%esi$/;"	l
fdf	user/usertests.asm	/^     fdf:	83 c4 10             	add    $0x10,%esp$/;"	l
fe	user/cat.asm	/^  fe:	53                   	push   %ebx$/;"	l
fe	user/cowtest3.asm	/^  fe:	fc                   	cld    $/;"	l
fe	user/echo.asm	/^  fe:	84 d2                	test   %dl,%dl$/;"	l
fe	user/forktest.asm	/^  fe:	89 c2                	mov    %eax,%edx$/;"	l
fe	user/grep.asm	/^  fe:	e8 45 ff ff ff       	call   48 <matchhere>$/;"	l
fe	user/init.asm	/^  fe:	c3                   	ret    $/;"	l
fe	user/ls.asm	/^  fe:	57                   	push   %edi$/;"	l
fe	user/mkdir.asm	/^  fe:	5d                   	pop    %ebp$/;"	l
fe	user/rm.asm	/^  fe:	5d                   	pop    %ebp$/;"	l
fe	user/stressfs.asm	/^  fe:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fe2	user/usertests.asm	/^     fe2:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
fe7	user/usertests.asm	/^     fe7:	e9 62 ff ff ff       	jmp    f4e <fourfiles+0x117>$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
fec	user/usertests.asm	/^     fec:	83 ec 04             	sub    $0x4,%esp$/;"	l
fef	user/usertests.asm	/^     fef:	53                   	push   %ebx$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	user/cat.asm	/^  ff:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ff	user/cowtest1.asm	/^  ff:	53                   	push   %ebx$/;"	l
ff	user/cowtest3.asm	/^  ff:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
ff	user/init.asm	/^  ff:	55                   	push   %ebp$/;"	l
ff	user/kill.asm	/^  ff:	84 d2                	test   %dl,%dl$/;"	l
ff	user/ls.asm	/^  ff:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)$/;"	l
ff	user/mkdir.asm	/^  ff:	c3                   	ret    $/;"	l
ff	user/rm.asm	/^  ff:	c3                   	ret    $/;"	l
ff	user/sh.asm	/^  ff:	83 ec 04             	sub    $0x4,%esp$/;"	l
ff	user/usertests.asm	/^      ff:	85 c0                	test   %eax,%eax$/;"	l
ff	user/wc.asm	/^  ff:	83 ec 08             	sub    $0x8,%esp$/;"	l
ff	user/zombie.asm	/^  ff:	8d 5e 01             	lea    0x1(%esi),%ebx$/;"	l
ff0	user/usertests.asm	/^     ff0:	68 75 40 00 00       	push   $0x4075$/;"	l
ff5	user/usertests.asm	/^     ff5:	6a 01                	push   $0x1$/;"	l
ff7	user/usertests.asm	/^     ff7:	e8 c8 28 00 00       	call   38c4 <printf>$/;"	l
ffc	user/usertests.asm	/^     ffc:	e8 91 27 00 00       	call   3792 <exit>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	file.h	/^struct file {$/;"	s
file	user/sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	file:
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	user/ls.c	/^fmtname(char *path)$/;"	f
fork	proc.c	/^fork(void)$/;"	f
fork1	user/sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	user/forktest.c	/^forktest(void)$/;"	f
forktest	user/usertests.c	/^forktest(void)$/;"	f
fourfiles	user/usertests.c	/^fourfiles(void)$/;"	f
fourteen	user/usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon8	typeref:struct:__anon8::run	file:
freemem	kalloc.c	/^int freemem()$/;"	f
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	user/cat.asm	/^      freep = prevp;$/;"	d
freep	user/cat.asm	/^  freep = p;$/;"	d
freep	user/cowtest1.asm	/^      freep = prevp;$/;"	d
freep	user/cowtest1.asm	/^  freep = p;$/;"	d
freep	user/cowtest2.asm	/^      freep = prevp;$/;"	d
freep	user/cowtest2.asm	/^  freep = p;$/;"	d
freep	user/cowtest3.asm	/^      freep = prevp;$/;"	d
freep	user/cowtest3.asm	/^  freep = p;$/;"	d
freep	user/echo.asm	/^      freep = prevp;$/;"	d
freep	user/echo.asm	/^  freep = p;$/;"	d
freep	user/forktest.asm	/^      freep = prevp;$/;"	d
freep	user/forktest.asm	/^  freep = p;$/;"	d
freep	user/grep.asm	/^      freep = prevp;$/;"	d
freep	user/grep.asm	/^  freep = p;$/;"	d
freep	user/init.asm	/^      freep = prevp;$/;"	d
freep	user/init.asm	/^  freep = p;$/;"	d
freep	user/kill.asm	/^      freep = prevp;$/;"	d
freep	user/kill.asm	/^  freep = p;$/;"	d
freep	user/ln.asm	/^      freep = prevp;$/;"	d
freep	user/ln.asm	/^  freep = p;$/;"	d
freep	user/ls.asm	/^      freep = prevp;$/;"	d
freep	user/ls.asm	/^  freep = p;$/;"	d
freep	user/mkdir.asm	/^      freep = prevp;$/;"	d
freep	user/mkdir.asm	/^  freep = p;$/;"	d
freep	user/rm.asm	/^      freep = prevp;$/;"	d
freep	user/rm.asm	/^  freep = p;$/;"	d
freep	user/sh.asm	/^      freep = prevp;$/;"	d
freep	user/sh.asm	/^  freep = p;$/;"	d
freep	user/stressfs.asm	/^      freep = prevp;$/;"	d
freep	user/stressfs.asm	/^  freep = p;$/;"	d
freep	user/usertests.asm	/^      freep = prevp;$/;"	d
freep	user/usertests.asm	/^  freep = p;$/;"	d
freep	user/wc.asm	/^      freep = prevp;$/;"	d
freep	user/wc.asm	/^  freep = p;$/;"	d
freep	user/zombie.asm	/^      freep = prevp;$/;"	d
freep	user/zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	user/usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
get_ref	kalloc.c	/^get_ref(uint pa)$/;"	f
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	user/sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	user/sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
global	user/cowtest3.asm	/^		global = 4;$/;"	d
global	user/cowtest3.c	/^int global = 3;$/;"	v
grep	user/grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
i	user/cat.asm	/^  i = 0;$/;"	d
i	user/cowtest1.asm	/^  i = 0;$/;"	d
i	user/cowtest2.asm	/^  i = 0;$/;"	d
i	user/cowtest3.asm	/^  i = 0;$/;"	d
i	user/echo.asm	/^  i = 0;$/;"	d
i	user/forktest.asm	/^  i = 0;$/;"	d
i	user/grep.asm	/^  i = 0;$/;"	d
i	user/init.asm	/^  i = 0;$/;"	d
i	user/kill.asm	/^  i = 0;$/;"	d
i	user/ln.asm	/^  i = 0;$/;"	d
i	user/ls.asm	/^  i = 0;$/;"	d
i	user/mkdir.asm	/^  i = 0;$/;"	d
i	user/rm.asm	/^  i = 0;$/;"	d
i	user/sh.asm	/^  i = 0;$/;"	d
i	user/stressfs.asm	/^  i = 0;$/;"	d
i	user/usertests.asm	/^  i = 0;$/;"	d
i	user/wc.asm	/^  i = 0;$/;"	d
i	user/zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon6
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
inc_ref	kalloc.c	/^inc_ref(uint pa)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon6	typeref:struct:__anon6::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon3
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	user/cat.asm	/^int$/;"	l
int	user/cowtest1.asm	/^int$/;"	l
int	user/cowtest2.asm	/^int$/;"	l
int	user/cowtest3.asm	/^int global = 3;$/;"	l
int	user/cowtest3.asm	/^int$/;"	l
int	user/echo.asm	/^int$/;"	l
int	user/forktest.asm	/^int$/;"	l
int	user/grep.asm	/^int$/;"	l
int	user/init.asm	/^int$/;"	l
int	user/kill.asm	/^int$/;"	l
int	user/ln.asm	/^int$/;"	l
int	user/ls.asm	/^int$/;"	l
int	user/mkdir.asm	/^int$/;"	l
int	user/rm.asm	/^int$/;"	l
int	user/sh.asm	/^int$/;"	l
int	user/stressfs.asm	/^int$/;"	l
int	user/usertests.asm	/^int$/;"	l
int	user/wc.asm	/^int$/;"	l
int	user/zombie.asm	/^int$/;"	l
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	user/usertests.c	/^iputtest(void)$/;"	f
iref	user/usertests.c	/^iref(void)$/;"	f
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon8
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicid	lapic.c	/^lapicid(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
lcr3	x86.h	/^lcr3(uint val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	user/usertests.c	/^linktest(void)$/;"	f
linkunlink	user/usertests.c	/^linkunlink()$/;"	f
listcmd	user/sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	user/sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	kalloc.c	/^	struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon2	file:
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	user/ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	main.c	/^main(void)$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	user/cat.c	/^main(int argc, char *argv[])$/;"	f
main	user/cowtest1.c	/^main(int argc, char **argv)$/;"	f
main	user/cowtest2.c	/^main(int argc, char **argv)$/;"	f
main	user/cowtest3.c	/^main(int argc, char **argv)$/;"	f
main	user/echo.c	/^main(int argc, char *argv[])$/;"	f
main	user/forktest.c	/^main(void)$/;"	f
main	user/grep.c	/^main(int argc, char *argv[])$/;"	f
main	user/init.c	/^main(void)$/;"	f
main	user/kill.c	/^main(int argc, char **argv)$/;"	f
main	user/ln.c	/^main(int argc, char *argv[])$/;"	f
main	user/ls.c	/^main(int argc, char *argv[])$/;"	f
main	user/mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	user/rm.c	/^main(int argc, char *argv[])$/;"	f
main	user/sh.c	/^main(void)$/;"	f
main	user/stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	user/usertests.c	/^main(int argc, char *argv[])$/;"	f
main	user/wc.c	/^main(int argc, char *argv[])$/;"	f
main	user/zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	user/grep.c	/^match(char *re, char *text)$/;"	f
matchhere	user/grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	user/grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
mem	user/usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	265;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mode	user/sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f
myproc	proc.c	/^myproc(void) {$/;"	f
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	user/cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/cat.asm	/^  n = 0;$/;"	d
n	user/cowtest1.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/cowtest1.asm	/^  n = 0;$/;"	d
n	user/cowtest2.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/cowtest2.asm	/^  n = 0;$/;"	d
n	user/cowtest3.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/cowtest3.asm	/^  n = 0;$/;"	d
n	user/echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/echo.asm	/^  n = 0;$/;"	d
n	user/forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/forktest.asm	/^  n = 0;$/;"	d
n	user/grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/grep.asm	/^  n = 0;$/;"	d
n	user/init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/init.asm	/^  n = 0;$/;"	d
n	user/kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/kill.asm	/^  n = 0;$/;"	d
n	user/ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/ln.asm	/^  n = 0;$/;"	d
n	user/ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/ls.asm	/^  n = 0;$/;"	d
n	user/mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/mkdir.asm	/^  n = 0;$/;"	d
n	user/rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/rm.asm	/^  n = 0;$/;"	d
n	user/sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/sh.asm	/^  n = 0;$/;"	d
n	user/stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/stressfs.asm	/^  n = 0;$/;"	d
n	user/usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/usertests.asm	/^  n = 0;$/;"	d
n	user/wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/wc.asm	/^  n = 0;$/;"	d
n	user/zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/zombie.asm	/^  n = 0;$/;"	d
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	user/cat.asm	/^  name: \\$/;"	l
name	user/cowtest1.asm	/^  name: \\$/;"	l
name	user/cowtest2.asm	/^  name: \\$/;"	l
name	user/cowtest3.asm	/^  name: \\$/;"	l
name	user/echo.asm	/^  name: \\$/;"	l
name	user/forktest.asm	/^  name: \\$/;"	l
name	user/grep.asm	/^  name: \\$/;"	l
name	user/init.asm	/^  name: \\$/;"	l
name	user/kill.asm	/^  name: \\$/;"	l
name	user/ln.asm	/^  name: \\$/;"	l
name	user/ls.asm	/^  name: \\$/;"	l
name	user/mkdir.asm	/^  name: \\$/;"	l
name	user/rm.asm	/^  name: \\$/;"	l
name	user/sh.asm	/^  name: \\$/;"	l
name	user/stressfs.asm	/^  name: \\$/;"	l
name	user/usertests.asm	/^  name: \\$/;"	l
name	user/usertests.c	/^char name[3];$/;"	v
name	user/wc.asm	/^  name: \\$/;"	l
name	user/zombie.asm	/^  name: \\$/;"	l
name	usys.S	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	user/cat.asm	/^    neg = 1;$/;"	d
neg	user/cat.asm	/^  neg = 0;$/;"	d
neg	user/cowtest1.asm	/^    neg = 1;$/;"	d
neg	user/cowtest1.asm	/^  neg = 0;$/;"	d
neg	user/cowtest2.asm	/^    neg = 1;$/;"	d
neg	user/cowtest2.asm	/^  neg = 0;$/;"	d
neg	user/cowtest3.asm	/^    neg = 1;$/;"	d
neg	user/cowtest3.asm	/^  neg = 0;$/;"	d
neg	user/echo.asm	/^    neg = 1;$/;"	d
neg	user/echo.asm	/^  neg = 0;$/;"	d
neg	user/forktest.asm	/^    neg = 1;$/;"	d
neg	user/forktest.asm	/^  neg = 0;$/;"	d
neg	user/grep.asm	/^    neg = 1;$/;"	d
neg	user/grep.asm	/^  neg = 0;$/;"	d
neg	user/init.asm	/^    neg = 1;$/;"	d
neg	user/init.asm	/^  neg = 0;$/;"	d
neg	user/kill.asm	/^    neg = 1;$/;"	d
neg	user/kill.asm	/^  neg = 0;$/;"	d
neg	user/ln.asm	/^    neg = 1;$/;"	d
neg	user/ln.asm	/^  neg = 0;$/;"	d
neg	user/ls.asm	/^    neg = 1;$/;"	d
neg	user/ls.asm	/^  neg = 0;$/;"	d
neg	user/mkdir.asm	/^    neg = 1;$/;"	d
neg	user/mkdir.asm	/^  neg = 0;$/;"	d
neg	user/rm.asm	/^    neg = 1;$/;"	d
neg	user/rm.asm	/^  neg = 0;$/;"	d
neg	user/sh.asm	/^    neg = 1;$/;"	d
neg	user/sh.asm	/^  neg = 0;$/;"	d
neg	user/stressfs.asm	/^    neg = 1;$/;"	d
neg	user/stressfs.asm	/^  neg = 0;$/;"	d
neg	user/usertests.asm	/^    neg = 1;$/;"	d
neg	user/usertests.asm	/^  neg = 0;$/;"	d
neg	user/wc.asm	/^    neg = 1;$/;"	d
neg	user/wc.asm	/^  neg = 0;$/;"	d
neg	user/zombie.asm	/^    neg = 1;$/;"	d
neg	user/zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nulterminate	user/sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
numfreepages	kalloc.c	/^	int numfreepages;$/;"	m	struct:__anon7	file:
nunits	user/cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/cowtest1.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/cowtest2.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/cowtest3.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/forktest.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
openiputtest	user/usertests.c	/^openiputtest(void)$/;"	f
opentest	user/usertests.c	/^opentest(void)$/;"	f
os	user/cat.asm	/^  os = s;$/;"	d
os	user/cowtest1.asm	/^  os = s;$/;"	d
os	user/cowtest2.asm	/^  os = s;$/;"	d
os	user/cowtest3.asm	/^  os = s;$/;"	d
os	user/echo.asm	/^  os = s;$/;"	d
os	user/forktest.asm	/^  os = s;$/;"	d
os	user/grep.asm	/^  os = s;$/;"	d
os	user/init.asm	/^  os = s;$/;"	d
os	user/kill.asm	/^  os = s;$/;"	d
os	user/ln.asm	/^  os = s;$/;"	d
os	user/ls.asm	/^  os = s;$/;"	d
os	user/mkdir.asm	/^  os = s;$/;"	d
os	user/rm.asm	/^  os = s;$/;"	d
os	user/sh.asm	/^  os = s;$/;"	d
os	user/stressfs.asm	/^  os = s;$/;"	d
os	user/usertests.asm	/^  os = s;$/;"	d
os	user/wc.asm	/^  os = s;$/;"	d
os	user/zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	user/cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/cowtest1.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/cowtest2.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/cowtest3.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/forktest.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
page_fault	vm.c	/^page_fault(void)$/;"	f
panic	console.c	/^panic(char *s)$/;"	f
panic	user/sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	user/sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	user/sh.c	/^parsecmd(char *s)$/;"	f
parseexec	user/sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	user/sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	user/sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	user/sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	user/sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picinit	picirq.c	/^picinit(void)$/;"	f
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	user/cowtest1.asm	/^	pid = fork();$/;"	d
pid	user/cowtest2.asm	/^	pid = fork();$/;"	d
pid	user/cowtest3.asm	/^	pid = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	user/usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	user/sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	user/sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pmem	kalloc.c	/^} pmem;$/;"	v	typeref:struct:__anon7
popcli	spinlock.c	/^popcli(void)$/;"	f
preempt	user/usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
print	user/forktest.c	/^print(int fd, const char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon9	typeref:struct:__anon9::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon9
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon10	typeref:union:header::__anon10::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r	user/cat.asm	/^  r = fstat(fd, st);$/;"	d
r	user/cowtest1.asm	/^  r = fstat(fd, st);$/;"	d
r	user/cowtest2.asm	/^  r = fstat(fd, st);$/;"	d
r	user/cowtest3.asm	/^  r = fstat(fd, st);$/;"	d
r	user/echo.asm	/^  r = fstat(fd, st);$/;"	d
r	user/forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	user/grep.asm	/^  r = fstat(fd, st);$/;"	d
r	user/init.asm	/^  r = fstat(fd, st);$/;"	d
r	user/kill.asm	/^  r = fstat(fd, st);$/;"	d
r	user/ln.asm	/^  r = fstat(fd, st);$/;"	d
r	user/ls.asm	/^  r = fstat(fd, st);$/;"	d
r	user/mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	user/rm.asm	/^  r = fstat(fd, st);$/;"	d
r	user/sh.asm	/^  r = fstat(fd, st);$/;"	d
r	user/stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	user/usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	user/wc.asm	/^  r = fstat(fd, st);$/;"	d
r	user/zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	user/usertests.c	/^rand()$/;"	f
randstate	user/usertests.c	/^unsigned long randstate = 1;$/;"	v
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	user/sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	user/sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
ref	kalloc.c	/^	uint ref[PHYSTOP >> PGSHIFT];$/;"	m	struct:__anon7	file:
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	user/usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	user/sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon10	file:
s	user/cat.asm	/^          s = "(null)";$/;"	d
s	user/cat.asm	/^        s = (char*)*ap;$/;"	d
s	user/cowtest1.asm	/^          s = "(null)";$/;"	d
s	user/cowtest1.asm	/^        s = (char*)*ap;$/;"	d
s	user/cowtest2.asm	/^          s = "(null)";$/;"	d
s	user/cowtest2.asm	/^        s = (char*)*ap;$/;"	d
s	user/cowtest3.asm	/^          s = "(null)";$/;"	d
s	user/cowtest3.asm	/^        s = (char*)*ap;$/;"	d
s	user/echo.asm	/^          s = "(null)";$/;"	d
s	user/echo.asm	/^        s = (char*)*ap;$/;"	d
s	user/forktest.asm	/^          s = "(null)";$/;"	d
s	user/forktest.asm	/^        s = (char*)*ap;$/;"	d
s	user/grep.asm	/^          s = "(null)";$/;"	d
s	user/grep.asm	/^        s = (char*)*ap;$/;"	d
s	user/init.asm	/^          s = "(null)";$/;"	d
s	user/init.asm	/^        s = (char*)*ap;$/;"	d
s	user/kill.asm	/^          s = "(null)";$/;"	d
s	user/kill.asm	/^        s = (char*)*ap;$/;"	d
s	user/ln.asm	/^          s = "(null)";$/;"	d
s	user/ln.asm	/^        s = (char*)*ap;$/;"	d
s	user/ls.asm	/^          s = "(null)";$/;"	d
s	user/ls.asm	/^        s = (char*)*ap;$/;"	d
s	user/mkdir.asm	/^          s = "(null)";$/;"	d
s	user/mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	user/rm.asm	/^          s = "(null)";$/;"	d
s	user/rm.asm	/^        s = (char*)*ap;$/;"	d
s	user/sh.asm	/^          s = "(null)";$/;"	d
s	user/sh.asm	/^        s = (char*)*ap;$/;"	d
s	user/stressfs.asm	/^          s = "(null)";$/;"	d
s	user/stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	user/usertests.asm	/^          s = "(null)";$/;"	d
s	user/usertests.asm	/^        s = (char*)*ap;$/;"	d
s	user/wc.asm	/^          s = "(null)";$/;"	d
s	user/wc.asm	/^        s = (char*)*ap;$/;"	d
s	user/zombie.asm	/^          s = "(null)";$/;"	d
s	user/zombie.asm	/^        s = (char*)*ap;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	user/usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	user/usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon10	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	user/cat.asm	/^  src = vsrc;$/;"	d
src	user/cowtest1.asm	/^  src = vsrc;$/;"	d
src	user/cowtest2.asm	/^  src = vsrc;$/;"	d
src	user/cowtest3.asm	/^  src = vsrc;$/;"	d
src	user/echo.asm	/^  src = vsrc;$/;"	d
src	user/forktest.asm	/^  src = vsrc;$/;"	d
src	user/grep.asm	/^  src = vsrc;$/;"	d
src	user/init.asm	/^  src = vsrc;$/;"	d
src	user/kill.asm	/^  src = vsrc;$/;"	d
src	user/ln.asm	/^  src = vsrc;$/;"	d
src	user/ls.asm	/^  src = vsrc;$/;"	d
src	user/mkdir.asm	/^  src = vsrc;$/;"	d
src	user/rm.asm	/^  src = vsrc;$/;"	d
src	user/sh.asm	/^  src = vsrc;$/;"	d
src	user/stressfs.asm	/^  src = vsrc;$/;"	d
src	user/usertests.asm	/^  src = vsrc;$/;"	d
src	user/wc.asm	/^  src = vsrc;$/;"	d
src	user/zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
start	bootasm.S	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	user/cat.asm	/^        state = '%';$/;"	d
state	user/cat.asm	/^      state = 0;$/;"	d
state	user/cat.asm	/^  state = 0;$/;"	d
state	user/cowtest1.asm	/^        state = '%';$/;"	d
state	user/cowtest1.asm	/^      state = 0;$/;"	d
state	user/cowtest1.asm	/^  state = 0;$/;"	d
state	user/cowtest2.asm	/^        state = '%';$/;"	d
state	user/cowtest2.asm	/^      state = 0;$/;"	d
state	user/cowtest2.asm	/^  state = 0;$/;"	d
state	user/cowtest3.asm	/^        state = '%';$/;"	d
state	user/cowtest3.asm	/^      state = 0;$/;"	d
state	user/cowtest3.asm	/^  state = 0;$/;"	d
state	user/echo.asm	/^        state = '%';$/;"	d
state	user/echo.asm	/^      state = 0;$/;"	d
state	user/echo.asm	/^  state = 0;$/;"	d
state	user/forktest.asm	/^        state = '%';$/;"	d
state	user/forktest.asm	/^      state = 0;$/;"	d
state	user/forktest.asm	/^  state = 0;$/;"	d
state	user/grep.asm	/^        state = '%';$/;"	d
state	user/grep.asm	/^      state = 0;$/;"	d
state	user/grep.asm	/^  state = 0;$/;"	d
state	user/init.asm	/^        state = '%';$/;"	d
state	user/init.asm	/^      state = 0;$/;"	d
state	user/init.asm	/^  state = 0;$/;"	d
state	user/kill.asm	/^        state = '%';$/;"	d
state	user/kill.asm	/^      state = 0;$/;"	d
state	user/kill.asm	/^  state = 0;$/;"	d
state	user/ln.asm	/^        state = '%';$/;"	d
state	user/ln.asm	/^      state = 0;$/;"	d
state	user/ln.asm	/^  state = 0;$/;"	d
state	user/ls.asm	/^        state = '%';$/;"	d
state	user/ls.asm	/^      state = 0;$/;"	d
state	user/ls.asm	/^  state = 0;$/;"	d
state	user/mkdir.asm	/^        state = '%';$/;"	d
state	user/mkdir.asm	/^      state = 0;$/;"	d
state	user/mkdir.asm	/^  state = 0;$/;"	d
state	user/rm.asm	/^        state = '%';$/;"	d
state	user/rm.asm	/^      state = 0;$/;"	d
state	user/rm.asm	/^  state = 0;$/;"	d
state	user/sh.asm	/^        state = '%';$/;"	d
state	user/sh.asm	/^      state = 0;$/;"	d
state	user/sh.asm	/^  state = 0;$/;"	d
state	user/stressfs.asm	/^        state = '%';$/;"	d
state	user/stressfs.asm	/^      state = 0;$/;"	d
state	user/stressfs.asm	/^  state = 0;$/;"	d
state	user/usertests.asm	/^        state = '%';$/;"	d
state	user/usertests.asm	/^      state = 0;$/;"	d
state	user/usertests.asm	/^  state = 0;$/;"	d
state	user/wc.asm	/^        state = '%';$/;"	d
state	user/wc.asm	/^      state = 0;$/;"	d
state	user/wc.asm	/^  state = 0;$/;"	d
state	user/zombie.asm	/^        state = '%';$/;"	d
state	user/zombie.asm	/^      state = 0;$/;"	d
state	user/zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	user/cat.asm	/^static Header *freep;$/;"	l
static	user/cat.asm	/^static Header base;$/;"	l
static	user/cat.asm	/^static inline void$/;"	l
static	user/cat.asm	/^static void$/;"	l
static	user/cowtest1.asm	/^static Header *freep;$/;"	l
static	user/cowtest1.asm	/^static Header base;$/;"	l
static	user/cowtest1.asm	/^static inline void$/;"	l
static	user/cowtest1.asm	/^static void$/;"	l
static	user/cowtest2.asm	/^static Header *freep;$/;"	l
static	user/cowtest2.asm	/^static Header base;$/;"	l
static	user/cowtest2.asm	/^static inline void$/;"	l
static	user/cowtest2.asm	/^static void$/;"	l
static	user/cowtest3.asm	/^static Header *freep;$/;"	l
static	user/cowtest3.asm	/^static Header base;$/;"	l
static	user/cowtest3.asm	/^static inline void$/;"	l
static	user/cowtest3.asm	/^static void$/;"	l
static	user/echo.asm	/^static Header *freep;$/;"	l
static	user/echo.asm	/^static Header base;$/;"	l
static	user/echo.asm	/^static inline void$/;"	l
static	user/echo.asm	/^static void$/;"	l
static	user/forktest.asm	/^static Header *freep;$/;"	l
static	user/forktest.asm	/^static Header base;$/;"	l
static	user/forktest.asm	/^static inline void$/;"	l
static	user/forktest.asm	/^static void$/;"	l
static	user/grep.asm	/^static Header *freep;$/;"	l
static	user/grep.asm	/^static Header base;$/;"	l
static	user/grep.asm	/^static inline void$/;"	l
static	user/grep.asm	/^static void$/;"	l
static	user/init.asm	/^static Header *freep;$/;"	l
static	user/init.asm	/^static Header base;$/;"	l
static	user/init.asm	/^static inline void$/;"	l
static	user/init.asm	/^static void$/;"	l
static	user/kill.asm	/^static Header *freep;$/;"	l
static	user/kill.asm	/^static Header base;$/;"	l
static	user/kill.asm	/^static inline void$/;"	l
static	user/kill.asm	/^static void$/;"	l
static	user/ln.asm	/^static Header *freep;$/;"	l
static	user/ln.asm	/^static Header base;$/;"	l
static	user/ln.asm	/^static inline void$/;"	l
static	user/ln.asm	/^static void$/;"	l
static	user/ls.asm	/^static Header *freep;$/;"	l
static	user/ls.asm	/^static Header base;$/;"	l
static	user/ls.asm	/^static inline void$/;"	l
static	user/ls.asm	/^static void$/;"	l
static	user/mkdir.asm	/^static Header *freep;$/;"	l
static	user/mkdir.asm	/^static Header base;$/;"	l
static	user/mkdir.asm	/^static inline void$/;"	l
static	user/mkdir.asm	/^static void$/;"	l
static	user/rm.asm	/^static Header *freep;$/;"	l
static	user/rm.asm	/^static Header base;$/;"	l
static	user/rm.asm	/^static inline void$/;"	l
static	user/rm.asm	/^static void$/;"	l
static	user/sh.asm	/^static Header *freep;$/;"	l
static	user/sh.asm	/^static Header base;$/;"	l
static	user/sh.asm	/^static inline void$/;"	l
static	user/sh.asm	/^static void$/;"	l
static	user/stressfs.asm	/^static Header *freep;$/;"	l
static	user/stressfs.asm	/^static Header base;$/;"	l
static	user/stressfs.asm	/^static inline void$/;"	l
static	user/stressfs.asm	/^static void$/;"	l
static	user/usertests.asm	/^static Header *freep;$/;"	l
static	user/usertests.asm	/^static Header base;$/;"	l
static	user/usertests.asm	/^static inline void$/;"	l
static	user/usertests.asm	/^static void$/;"	l
static	user/wc.asm	/^static Header *freep;$/;"	l
static	user/wc.asm	/^static Header base;$/;"	l
static	user/wc.asm	/^static inline void$/;"	l
static	user/wc.asm	/^static void$/;"	l
static	user/zombie.asm	/^static Header *freep;$/;"	l
static	user/zombie.asm	/^static Header base;$/;"	l
static	user/zombie.asm	/^static inline void$/;"	l
static	user/zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	user/usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(const char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
subdir	user/usertests.c	/^subdir(void)$/;"	f
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	user/sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_freemem	sysproc.c	/^sys_freemem(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
type	user/sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	user/sh.c	/^  int type;$/;"	m	struct:redircmd	file:
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	user/cat.asm	/^uint$/;"	l
uint	user/cowtest1.asm	/^uint$/;"	l
uint	user/cowtest2.asm	/^uint$/;"	l
uint	user/cowtest3.asm	/^uint$/;"	l
uint	user/echo.asm	/^uint$/;"	l
uint	user/forktest.asm	/^uint$/;"	l
uint	user/grep.asm	/^uint$/;"	l
uint	user/init.asm	/^uint$/;"	l
uint	user/kill.asm	/^uint$/;"	l
uint	user/ln.asm	/^uint$/;"	l
uint	user/ls.asm	/^uint$/;"	l
uint	user/mkdir.asm	/^uint$/;"	l
uint	user/rm.asm	/^uint$/;"	l
uint	user/sh.asm	/^uint$/;"	l
uint	user/stressfs.asm	/^uint$/;"	l
uint	user/usertests.asm	/^uint$/;"	l
uint	user/wc.asm	/^uint$/;"	l
uint	user/zombie.asm	/^uint$/;"	l
uio	user/usertests.c	/^uio()$/;"	f
uninit	user/usertests.c	/^char uninit[10000];$/;"	v
unlinkread	user/usertests.c	/^unlinkread(void)$/;"	f
use_lock	kalloc.c	/^	int use_lock;$/;"	m	struct:__anon7	file:
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon8	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
validateint	user/usertests.c	/^validateint(int *p)$/;"	f
validatetest	user/usertests.c	/^validatetest(void)$/;"	f
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	user/cat.asm	/^void$/;"	l
void	user/cowtest1.asm	/^void$/;"	l
void	user/cowtest2.asm	/^void$/;"	l
void	user/cowtest3.asm	/^void$/;"	l
void	user/echo.asm	/^void$/;"	l
void	user/forktest.asm	/^void$/;"	l
void	user/grep.asm	/^void$/;"	l
void	user/init.asm	/^void$/;"	l
void	user/kill.asm	/^void$/;"	l
void	user/ln.asm	/^void$/;"	l
void	user/ls.asm	/^void$/;"	l
void	user/mkdir.asm	/^void$/;"	l
void	user/rm.asm	/^void$/;"	l
void	user/sh.asm	/^void$/;"	l
void	user/stressfs.asm	/^void$/;"	l
void	user/usertests.asm	/^void$/;"	l
void	user/wc.asm	/^void$/;"	l
void	user/zombie.asm	/^void$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	user/wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	user/sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	user/usertests.c	/^writetest(void)$/;"	f
writetest1	user/usertests.c	/^writetest1(void)$/;"	f
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	user/cat.asm	/^    x = -xx;$/;"	d
x	user/cat.asm	/^    x = xx;$/;"	d
x	user/cowtest1.asm	/^    x = -xx;$/;"	d
x	user/cowtest1.asm	/^    x = xx;$/;"	d
x	user/cowtest2.asm	/^    x = -xx;$/;"	d
x	user/cowtest2.asm	/^    x = xx;$/;"	d
x	user/cowtest3.asm	/^    x = -xx;$/;"	d
x	user/cowtest3.asm	/^    x = xx;$/;"	d
x	user/echo.asm	/^    x = -xx;$/;"	d
x	user/echo.asm	/^    x = xx;$/;"	d
x	user/forktest.asm	/^    x = -xx;$/;"	d
x	user/forktest.asm	/^    x = xx;$/;"	d
x	user/grep.asm	/^    x = -xx;$/;"	d
x	user/grep.asm	/^    x = xx;$/;"	d
x	user/init.asm	/^    x = -xx;$/;"	d
x	user/init.asm	/^    x = xx;$/;"	d
x	user/kill.asm	/^    x = -xx;$/;"	d
x	user/kill.asm	/^    x = xx;$/;"	d
x	user/ln.asm	/^    x = -xx;$/;"	d
x	user/ln.asm	/^    x = xx;$/;"	d
x	user/ls.asm	/^    x = -xx;$/;"	d
x	user/ls.asm	/^    x = xx;$/;"	d
x	user/mkdir.asm	/^    x = -xx;$/;"	d
x	user/mkdir.asm	/^    x = xx;$/;"	d
x	user/rm.asm	/^    x = -xx;$/;"	d
x	user/rm.asm	/^    x = xx;$/;"	d
x	user/sh.asm	/^    x = -xx;$/;"	d
x	user/sh.asm	/^    x = xx;$/;"	d
x	user/stressfs.asm	/^    x = -xx;$/;"	d
x	user/stressfs.asm	/^    x = xx;$/;"	d
x	user/usertests.asm	/^    x = -xx;$/;"	d
x	user/usertests.asm	/^    x = xx;$/;"	d
x	user/wc.asm	/^    x = -xx;$/;"	d
x	user/wc.asm	/^    x = xx;$/;"	d
x	user/zombie.asm	/^    x = -xx;$/;"	d
x	user/zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
